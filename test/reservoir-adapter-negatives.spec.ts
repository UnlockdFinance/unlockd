import { zeroAddress } from "ethereumjs-util";
import { BigNumber } from "ethers";
import { parseEther } from "ethers/lib/utils";
import { FORK_BLOCK_NUMBER } from "../hardhat.config";
import { SAFETRANSFERFROM_FUNCTION_SELECTOR } from "../helpers/constants";
import { convertToCurrencyDecimals } from "../helpers/contracts-helpers";
import { createRandomAddress, evmRevert, evmSnapshot, fundWithERC20, fundWithERC721 } from "../helpers/misc-utils";
import { ExecutionInfo, IConfigNftAsCollateralInput, ProtocolErrors } from "../helpers/types";
import { approveERC20, getERC20Balance, setApprovalForAll } from "./helpers/actions";
import { makeSuite, TestEnv } from "./helpers/make-suite";
import "./helpers/utils/math";

const { expect } = require("chai");

makeSuite("Reservoir adapter negatives", (testEnv: TestEnv) => {
  let snapshotId;
  before(async () => {
    const { reservoirAdapter, configurator, deployer, nftOracle, loan, reservoirModules, dWETH } = testEnv;
    const poolAdmin = deployer;
    // Add deployer as LTV Manager
    await configurator.setLtvManagerStatus(deployer.address, true);
    // Add configurator and deployer as Oracle Price Manager
    await nftOracle.setPriceManagerStatus(configurator.address, true);
    await nftOracle.setPriceManagerStatus(deployer.address, true);

    // Add reservoiradapter as market adapter in pool loan
    loan.updateMarketAdapters([reservoirAdapter.address], true);

    // Add deployer as a liquidator
    await reservoirAdapter.connect(poolAdmin.signer).updateLiquidators([deployer.address], true);

    // Add reservoir modules
    await reservoirAdapter.connect(poolAdmin.signer).updateModules(
      reservoirModules.map((mod) => mod.contract.address),
      true
    );

    // Add reservoir adapter as debt token burner
    await dWETH.updateTokenManagers([reservoirAdapter.address], true);
  });
  beforeEach(async () => {
    snapshotId = await evmSnapshot();
  });
  afterEach(async () => {
    await evmRevert(snapshotId);
  });
  it("BaseAdapter: check onlyPoolAdmin modifier on updateModules/updateLiquidators (expect revert)", async () => {
    const { reservoirAdapter, users } = testEnv;

    const invalidPoolAdmin = users[1];

    await expect(
      reservoirAdapter.connect(invalidPoolAdmin.signer).updateModules([createRandomAddress()], true)
    ).to.be.revertedWith("CallerNotPoolAdmin()");

    await expect(
      reservoirAdapter.connect(invalidPoolAdmin.signer).updateLiquidators([createRandomAddress()], true)
    ).to.be.revertedWith("CallerNotPoolAdmin()");
  });

  it("ReservoirAdapter: check invalidZeroAddress modifier on updateModules/updateLiquidators (expect revert)", async () => {
    const { reservoirAdapter, users } = testEnv;

    const invalidPoolAdmin = users[1];

    await expect(
      reservoirAdapter.connect(invalidPoolAdmin.signer).updateModules([zeroAddress()], true)
    ).to.be.revertedWith("CallerNotPoolAdmin()");

    await expect(
      reservoirAdapter.connect(invalidPoolAdmin.signer).updateLiquidators([zeroAddress()], true)
    ).to.be.revertedWith("CallerNotPoolAdmin()");
  });
  it("ReservoirAdapter: check onlyReservoirLiquidator modifier (expect revert)", async () => {
    const { reservoirAdapter, users, deployer, bayc, weth } = testEnv;

    const poolAdmin = deployer;
    const liquidator = users[1];
    const invalidLiquidator = users[2];

    const calldata =
      "0xb88d4fde000000000000000000000000" +
      reservoirAdapter.address.substring(2) +
      "000000000000000000000000fb3f14829f15b1303d6ca677e3fae5a558e064d1000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000984760f2a0b000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000fb3f14829f15b1303d6ca677e3fae5a558e064d10000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008846baab5f700000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000fb63b055ff1816024a8bfcc879be92c5bc4f2089000000000000000000000000fb63b055ff1816024a8bfcc879be92c5bc4f20890000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000b3dbf4147183492a7bc544e8abed20ad6831fecb000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064087fab000000000000000000000000000000000000000000000000000000006408832e0000000000000000000000000000000000000000000000000000000000000000360c6ebe000000000000000000000000000000000000000026c78aebad7fbc860000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003afe244a5796b0000000000000000000000000000000000000000000000000003afe244a5796b000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000bc4ca0eda7647a8ab7c2061c2e118a18a936f13d207eef14821002816f96350da595843e28782087ede1db7a5647f691a212841700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b3dbf4147183492a7bc544e8abed20ad6831fecb0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004b82bdcfcc4600000000000000000000000000000000000000000000000000004b82bdcfcc46000000000000000000000000000a858ddc0445d8131dac4d1de01f834ffcba52ef100000000000000000000000000000000000000000000000000000000000000406974060a90b8b12758a860945c434a158cd49d288b5ecef17ea2bb14e9decd10948f04d95c837c3cf4c66bb0c392b22a59cfd89293dbaefbfb594a4dab681aa0000000000000000000000000000000000000000000000000000000000000000e26609d2ce05747845086b3e8fe1d860b197f6e6887bd583db52d3aafb254f1a4c193aa5247044972d2a9814854c6279606b3c44ca3acf453c6e8b6835b8acaddf657bf8def118cb6c92e7b8fd5e24e4e9e104bb1c7c71b18ea2959c1b238d4e51e4a619b4a71552ffd25a574e261af689997eac38d6bcca3f636b08883d743924aec8da1689ae1222e15de516cc5b0afda0014bd925c8c59af101440e3eb1009c4fa06f35d8e0628f0e96e84465ff9dd321d80256fc865245a57a6052e531d6d817af8f034eee8397ebe1ac02f18f397b7cd42a527f60561af7c432907c3163ecdb7502ebe77cb7ae589a320f1abab044d56e0ffc1ee8cc84f70c8e86c5a4442fd3a7161df6ebccdbae3729fe90646698c98e033fcc37392a8340217755ddfa66d1a692f06d21cc9568f5ac60513d4eee6dafbddcce8e813f2ecbdca372015152451117f4aa302390e12848c743adc278138cf28f270664b6880a67b4e18a4f1ef6273e5ad1ceef2c956077689c8b8d5e65ab636caa099db1d8bf0d117da5f197533ce38604490efbfaa7614bff7fd7f733fb2198dd15007bba13c653ffff40a99a5281a337fe69d7724160ba8726d55eb42dbbef9154978857e78f5a2bec7e200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    await expect(
      reservoirAdapter.connect(invalidLiquidator.signer).liquidateReservoir(bayc.address, weth.address, calldata, "0")
    ).to.be.revertedWith("NotReservoirLiquidator()");
  });

  it("ReservoirAdapter: check liquidation of a non-existing loan", async () => {
    const { reservoirAdapter, bayc, weth } = testEnv;

    const tokenId = "100";
    const calldata =
      "0xb88d4fde000000000000000000000000" +
      reservoirAdapter.address.substring(2) +
      "000000000000000000000000fb3f14829f15b1303d6ca677e3fae5a558e064d1000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000984760f2a0b000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000fb3f14829f15b1303d6ca677e3fae5a558e064d10000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008846baab5f700000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000fb63b055ff1816024a8bfcc879be92c5bc4f2089000000000000000000000000fb63b055ff1816024a8bfcc879be92c5bc4f20890000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000b3dbf4147183492a7bc544e8abed20ad6831fecb000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064087fab000000000000000000000000000000000000000000000000000000006408832e0000000000000000000000000000000000000000000000000000000000000000360c6ebe000000000000000000000000000000000000000026c78aebad7fbc860000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003afe244a5796b0000000000000000000000000000000000000000000000000003afe244a5796b000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000bc4ca0eda7647a8ab7c2061c2e118a18a936f13d207eef14821002816f96350da595843e28782087ede1db7a5647f691a212841700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b3dbf4147183492a7bc544e8abed20ad6831fecb0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004b82bdcfcc4600000000000000000000000000000000000000000000000000004b82bdcfcc46000000000000000000000000000a858ddc0445d8131dac4d1de01f834ffcba52ef100000000000000000000000000000000000000000000000000000000000000406974060a90b8b12758a860945c434a158cd49d288b5ecef17ea2bb14e9decd10948f04d95c837c3cf4c66bb0c392b22a59cfd89293dbaefbfb594a4dab681aa0000000000000000000000000000000000000000000000000000000000000000e26609d2ce05747845086b3e8fe1d860b197f6e6887bd583db52d3aafb254f1a4c193aa5247044972d2a9814854c6279606b3c44ca3acf453c6e8b6835b8acaddf657bf8def118cb6c92e7b8fd5e24e4e9e104bb1c7c71b18ea2959c1b238d4e51e4a619b4a71552ffd25a574e261af689997eac38d6bcca3f636b08883d743924aec8da1689ae1222e15de516cc5b0afda0014bd925c8c59af101440e3eb1009c4fa06f35d8e0628f0e96e84465ff9dd321d80256fc865245a57a6052e531d6d817af8f034eee8397ebe1ac02f18f397b7cd42a527f60561af7c432907c3163ecdb7502ebe77cb7ae589a320f1abab044d56e0ffc1ee8cc84f70c8e86c5a4442fd3a7161df6ebccdbae3729fe90646698c98e033fcc37392a8340217755ddfa66d1a692f06d21cc9568f5ac60513d4eee6dafbddcce8e813f2ecbdca372015152451117f4aa302390e12848c743adc278138cf28f270664b6880a67b4e18a4f1ef6273e5ad1ceef2c956077689c8b8d5e65ab636caa099db1d8bf0d117da5f197533ce38604490efbfaa7614bff7fd7f733fb2198dd15007bba13c653ffff40a99a5281a337fe69d7724160ba8726d55eb42dbbef9154978857e78f5a2bec7e200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    await expect(reservoirAdapter.liquidateReservoir(bayc.address, weth.address, calldata, "0")).to.be.revertedWith(
      "NftNotUsedAsCollateral()"
    );
  });

  it("ReservoirAdapter: check liquidation of an unactive NFT", async () => {
    const { reservoirAdapter, bayc, pool, nftOracle, weth, deployer, users, configurator } = testEnv;
    const depositor = users[1];
    const borrower = users[2];
    const tokenId = "100";
    /*//////////////////////////////////////////////////////////////
                        BORROW PROCESS
    //////////////////////////////////////////////////////////////*/

    //mints WETH to the depositor
    await fundWithERC20("WETH", depositor.address, "1000");
    await approveERC20(testEnv, depositor, "WETH");

    //deposits WETH
    const amountDeposit = await convertToCurrencyDecimals(depositor, weth, "1000");

    await pool.connect(depositor.signer).deposit(weth.address, amountDeposit, depositor.address, "0");

    //mints BAYC to borrower
    await fundWithERC721("BAYC", borrower.address, parseInt(tokenId));
    //approve protocol to access borrower wallet
    await setApprovalForAll(testEnv, borrower, "BAYC");

    //borrows
    const collData: IConfigNftAsCollateralInput = {
      asset: bayc.address,
      nftTokenId: tokenId,
      newPrice: parseEther("100"), //100 ETH valuation
      ltv: 6000,
      liquidationThreshold: 7500,
      redeemThreshold: 5000,
      liquidationBonus: 500,
      redeemDuration: 100,
      auctionDuration: 200,
      redeemFine: 500,
      minBidFine: 2000,
    };

    await configurator.connect(deployer.signer).configureNftsAsCollateral([collData]);

    // Borrow 40 WETH
    await pool
      .connect(borrower.signer)
      .borrow(weth.address, parseEther("40"), bayc.address, tokenId, borrower.address, "0");

    /*//////////////////////////////////////////////////////////////
                        LOWER HEALTH 
    //////////////////////////////////////////////////////////////*/
    await nftOracle.setNFTPrice(bayc.address, tokenId, parseEther("50"));

    /*//////////////////////////////////////////////////////////////
                      SET UNACTIVE NFT
    //////////////////////////////////////////////////////////////*/
    await configurator.setActiveFlagOnNftByTokenId([bayc.address], [tokenId], false);

    /*//////////////////////////////////////////////////////////////
                      LIQUIDATE RESERVOIR
    //////////////////////////////////////////////////////////////*/

    const calldata =
      "0xb88d4fde000000000000000000000000" +
      reservoirAdapter.address.substring(2) +
      "000000000000000000000000fb3f14829f15b1303d6ca677e3fae5a558e064d1000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000984760f2a0b000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000fb3f14829f15b1303d6ca677e3fae5a558e064d10000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008846baab5f700000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000fb63b055ff1816024a8bfcc879be92c5bc4f2089000000000000000000000000fb63b055ff1816024a8bfcc879be92c5bc4f20890000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000b3dbf4147183492a7bc544e8abed20ad6831fecb000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064087fab000000000000000000000000000000000000000000000000000000006408832e0000000000000000000000000000000000000000000000000000000000000000360c6ebe000000000000000000000000000000000000000026c78aebad7fbc860000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003afe244a5796b0000000000000000000000000000000000000000000000000003afe244a5796b000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000bc4ca0eda7647a8ab7c2061c2e118a18a936f13d207eef14821002816f96350da595843e28782087ede1db7a5647f691a212841700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b3dbf4147183492a7bc544e8abed20ad6831fecb0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004b82bdcfcc4600000000000000000000000000000000000000000000000000004b82bdcfcc46000000000000000000000000000a858ddc0445d8131dac4d1de01f834ffcba52ef100000000000000000000000000000000000000000000000000000000000000406974060a90b8b12758a860945c434a158cd49d288b5ecef17ea2bb14e9decd10948f04d95c837c3cf4c66bb0c392b22a59cfd89293dbaefbfb594a4dab681aa0000000000000000000000000000000000000000000000000000000000000000e26609d2ce05747845086b3e8fe1d860b197f6e6887bd583db52d3aafb254f1a4c193aa5247044972d2a9814854c6279606b3c44ca3acf453c6e8b6835b8acaddf657bf8def118cb6c92e7b8fd5e24e4e9e104bb1c7c71b18ea2959c1b238d4e51e4a619b4a71552ffd25a574e261af689997eac38d6bcca3f636b08883d743924aec8da1689ae1222e15de516cc5b0afda0014bd925c8c59af101440e3eb1009c4fa06f35d8e0628f0e96e84465ff9dd321d80256fc865245a57a6052e531d6d817af8f034eee8397ebe1ac02f18f397b7cd42a527f60561af7c432907c3163ecdb7502ebe77cb7ae589a320f1abab044d56e0ffc1ee8cc84f70c8e86c5a4442fd3a7161df6ebccdbae3729fe90646698c98e033fcc37392a8340217755ddfa66d1a692f06d21cc9568f5ac60513d4eee6dafbddcce8e813f2ecbdca372015152451117f4aa302390e12848c743adc278138cf28f270664b6880a67b4e18a4f1ef6273e5ad1ceef2c956077689c8b8d5e65ab636caa099db1d8bf0d117da5f197533ce38604490efbfaa7614bff7fd7f733fb2198dd15007bba13c653ffff40a99a5281a337fe69d7724160ba8726d55eb42dbbef9154978857e78f5a2bec7e200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    await expect(reservoirAdapter.liquidateReservoir(bayc.address, weth.address, calldata, "0")).to.be.revertedWith(
      "InactiveNft()"
    );
  });
  it("ReservoirAdapter: check liquidation of an invalid reserve", async () => {
    const { reservoirAdapter, bayc, pool, nftOracle, weth, deployer, users, configurator } = testEnv;
    const depositor = users[1];
    const borrower = users[2];
    const tokenId = "100";
    /*//////////////////////////////////////////////////////////////
                        BORROW PROCESS
    //////////////////////////////////////////////////////////////*/

    //mints WETH to the depositor
    await fundWithERC20("WETH", depositor.address, "1000");
    await approveERC20(testEnv, depositor, "WETH");

    //deposits WETH
    const amountDeposit = await convertToCurrencyDecimals(depositor, weth, "1000");

    await pool.connect(depositor.signer).deposit(weth.address, amountDeposit, depositor.address, "0");

    //mints BAYC to borrower
    await fundWithERC721("BAYC", borrower.address, parseInt(tokenId));
    //approve protocol to access borrower wallet
    await setApprovalForAll(testEnv, borrower, "BAYC");

    //borrows
    const collData: IConfigNftAsCollateralInput = {
      asset: bayc.address,
      nftTokenId: tokenId,
      newPrice: parseEther("100"), //100 ETH valuation
      ltv: 6000,
      liquidationThreshold: 7500,
      redeemThreshold: 5000,
      liquidationBonus: 500,
      redeemDuration: 100,
      auctionDuration: 200,
      redeemFine: 500,
      minBidFine: 2000,
    };

    await configurator.connect(deployer.signer).configureNftsAsCollateral([collData]);

    // Borrow 40 WETH
    await pool
      .connect(borrower.signer)
      .borrow(weth.address, parseEther("40"), bayc.address, tokenId, borrower.address, "0");

    /*//////////////////////////////////////////////////////////////
                        LOWER HEALTH 
    //////////////////////////////////////////////////////////////*/
    await nftOracle.setNFTPrice(bayc.address, tokenId, parseEther("50"));

    /*//////////////////////////////////////////////////////////////
                      LIQUIDATE RESERVOIR
    //////////////////////////////////////////////////////////////*/

    const calldata =
      "0xb88d4fde000000000000000000000000" +
      reservoirAdapter.address.substring(2) +
      "000000000000000000000000fb3f14829f15b1303d6ca677e3fae5a558e064d1000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000984760f2a0b000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000fb3f14829f15b1303d6ca677e3fae5a558e064d10000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008846baab5f700000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000fb63b055ff1816024a8bfcc879be92c5bc4f2089000000000000000000000000fb63b055ff1816024a8bfcc879be92c5bc4f20890000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000b3dbf4147183492a7bc544e8abed20ad6831fecb000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064087fab000000000000000000000000000000000000000000000000000000006408832e0000000000000000000000000000000000000000000000000000000000000000360c6ebe000000000000000000000000000000000000000026c78aebad7fbc860000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003afe244a5796b0000000000000000000000000000000000000000000000000003afe244a5796b000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000bc4ca0eda7647a8ab7c2061c2e118a18a936f13d207eef14821002816f96350da595843e28782087ede1db7a5647f691a212841700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b3dbf4147183492a7bc544e8abed20ad6831fecb0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004b82bdcfcc4600000000000000000000000000000000000000000000000000004b82bdcfcc46000000000000000000000000000a858ddc0445d8131dac4d1de01f834ffcba52ef100000000000000000000000000000000000000000000000000000000000000406974060a90b8b12758a860945c434a158cd49d288b5ecef17ea2bb14e9decd10948f04d95c837c3cf4c66bb0c392b22a59cfd89293dbaefbfb594a4dab681aa0000000000000000000000000000000000000000000000000000000000000000e26609d2ce05747845086b3e8fe1d860b197f6e6887bd583db52d3aafb254f1a4c193aa5247044972d2a9814854c6279606b3c44ca3acf453c6e8b6835b8acaddf657bf8def118cb6c92e7b8fd5e24e4e9e104bb1c7c71b18ea2959c1b238d4e51e4a619b4a71552ffd25a574e261af689997eac38d6bcca3f636b08883d743924aec8da1689ae1222e15de516cc5b0afda0014bd925c8c59af101440e3eb1009c4fa06f35d8e0628f0e96e84465ff9dd321d80256fc865245a57a6052e531d6d817af8f034eee8397ebe1ac02f18f397b7cd42a527f60561af7c432907c3163ecdb7502ebe77cb7ae589a320f1abab044d56e0ffc1ee8cc84f70c8e86c5a4442fd3a7161df6ebccdbae3729fe90646698c98e033fcc37392a8340217755ddfa66d1a692f06d21cc9568f5ac60513d4eee6dafbddcce8e813f2ecbdca372015152451117f4aa302390e12848c743adc278138cf28f270664b6880a67b4e18a4f1ef6273e5ad1ceef2c956077689c8b8d5e65ab636caa099db1d8bf0d117da5f197533ce38604490efbfaa7614bff7fd7f733fb2198dd15007bba13c653ffff40a99a5281a337fe69d7724160ba8726d55eb42dbbef9154978857e78f5a2bec7e200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    await expect(
      reservoirAdapter.liquidateReservoir(bayc.address, createRandomAddress(), calldata, "0")
    ).to.be.revertedWith(ProtocolErrors.VL_INVALID_RESERVE_ADDRESS);
  });
  it("ReservoirAdapter: check liquidation of a healthy loan", async () => {
    const { reservoirAdapter, bayc, pool, weth, deployer, users, configurator } = testEnv;
    const depositor = users[1];
    const borrower = users[2];
    const tokenId = "100";

    /*//////////////////////////////////////////////////////////////
                        BORROW PROCESS
    //////////////////////////////////////////////////////////////*/
    //mints WETH to the depositor
    await fundWithERC20("WETH", depositor.address, "1000");
    await approveERC20(testEnv, depositor, "WETH");

    //deposits WETH
    const amountDeposit = await convertToCurrencyDecimals(depositor, weth, "1000");

    await pool.connect(depositor.signer).deposit(weth.address, amountDeposit, depositor.address, "0");

    //mints BAYC to borrower
    await fundWithERC721("BAYC", borrower.address, parseInt(tokenId));
    //approve protocol to access borrower wallet
    await setApprovalForAll(testEnv, borrower, "BAYC");

    //borrows
    const collData: IConfigNftAsCollateralInput = {
      asset: bayc.address,
      nftTokenId: tokenId,
      newPrice: parseEther("100"), //100 ETH valuation
      ltv: 6000,
      liquidationThreshold: 7500,
      redeemThreshold: 5000,
      liquidationBonus: 500,
      redeemDuration: 100,
      auctionDuration: 200,
      redeemFine: 500,
      minBidFine: 2000,
    };

    await configurator.connect(deployer.signer).configureNftsAsCollateral([collData]);

    // Borrow 40 WETH
    await pool
      .connect(borrower.signer)
      .borrow(weth.address, parseEther("40"), bayc.address, tokenId, borrower.address, "0");

    /*//////////////////////////////////////////////////////////////
                      LIQUIDATE RESERVOIR
    //////////////////////////////////////////////////////////////*/
    const calldata =
      "0xb88d4fde000000000000000000000000" +
      reservoirAdapter.address.substring(2) +
      "000000000000000000000000fb3f14829f15b1303d6ca677e3fae5a558e064d1000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000984760f2a0b000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000fb3f14829f15b1303d6ca677e3fae5a558e064d10000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008846baab5f700000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000fb63b055ff1816024a8bfcc879be92c5bc4f2089000000000000000000000000fb63b055ff1816024a8bfcc879be92c5bc4f20890000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000b3dbf4147183492a7bc544e8abed20ad6831fecb000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064087fab000000000000000000000000000000000000000000000000000000006408832e0000000000000000000000000000000000000000000000000000000000000000360c6ebe000000000000000000000000000000000000000026c78aebad7fbc860000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003afe244a5796b0000000000000000000000000000000000000000000000000003afe244a5796b000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000bc4ca0eda7647a8ab7c2061c2e118a18a936f13d207eef14821002816f96350da595843e28782087ede1db7a5647f691a212841700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b3dbf4147183492a7bc544e8abed20ad6831fecb0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004b82bdcfcc4600000000000000000000000000000000000000000000000000004b82bdcfcc46000000000000000000000000000a858ddc0445d8131dac4d1de01f834ffcba52ef100000000000000000000000000000000000000000000000000000000000000406974060a90b8b12758a860945c434a158cd49d288b5ecef17ea2bb14e9decd10948f04d95c837c3cf4c66bb0c392b22a59cfd89293dbaefbfb594a4dab681aa0000000000000000000000000000000000000000000000000000000000000000e26609d2ce05747845086b3e8fe1d860b197f6e6887bd583db52d3aafb254f1a4c193aa5247044972d2a9814854c6279606b3c44ca3acf453c6e8b6835b8acaddf657bf8def118cb6c92e7b8fd5e24e4e9e104bb1c7c71b18ea2959c1b238d4e51e4a619b4a71552ffd25a574e261af689997eac38d6bcca3f636b08883d743924aec8da1689ae1222e15de516cc5b0afda0014bd925c8c59af101440e3eb1009c4fa06f35d8e0628f0e96e84465ff9dd321d80256fc865245a57a6052e531d6d817af8f034eee8397ebe1ac02f18f397b7cd42a527f60561af7c432907c3163ecdb7502ebe77cb7ae589a320f1abab044d56e0ffc1ee8cc84f70c8e86c5a4442fd3a7161df6ebccdbae3729fe90646698c98e033fcc37392a8340217755ddfa66d1a692f06d21cc9568f5ac60513d4eee6dafbddcce8e813f2ecbdca372015152451117f4aa302390e12848c743adc278138cf28f270664b6880a67b4e18a4f1ef6273e5ad1ceef2c956077689c8b8d5e65ab636caa099db1d8bf0d117da5f197533ce38604490efbfaa7614bff7fd7f733fb2198dd15007bba13c653ffff40a99a5281a337fe69d7724160ba8726d55eb42dbbef9154978857e78f5a2bec7e200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    await expect(reservoirAdapter.liquidateReservoir(bayc.address, weth.address, calldata, "0")).to.be.revertedWith(
      "LoanIsHealthy()"
    );
  });
  it("ReservoirAdapter: check liquidation passing an invalid safeTransferFrom function selector", async () => {
    const { reservoirAdapter, bayc, pool, nftOracle, weth, deployer, users, configurator } = testEnv;
    const depositor = users[1];
    const borrower = users[2];
    const bidder = users[3];
    const tokenId = "100";
    /*//////////////////////////////////////////////////////////////
                        BORROW PROCESS
    //////////////////////////////////////////////////////////////*/

    //mints WETH to the depositor
    await fundWithERC20("WETH", depositor.address, "1000");
    await approveERC20(testEnv, depositor, "WETH");

    //deposits WETH
    const amountDeposit = await convertToCurrencyDecimals(depositor, weth, "1000");

    await pool.connect(depositor.signer).deposit(weth.address, amountDeposit, depositor.address, "0");

    //mints BAYC to borrower
    await fundWithERC721("BAYC", borrower.address, parseInt(tokenId));
    //approve protocol to access borrower wallet
    await setApprovalForAll(testEnv, borrower, "BAYC");

    //borrows
    const collData: IConfigNftAsCollateralInput = {
      asset: bayc.address,
      nftTokenId: tokenId,
      newPrice: parseEther("100"), //100 ETH valuation
      ltv: 6000,
      liquidationThreshold: 7500,
      redeemThreshold: 5000,
      liquidationBonus: 500,
      redeemDuration: 100,
      auctionDuration: 200,
      redeemFine: 500,
      minBidFine: 2000,
    };

    await configurator.connect(deployer.signer).configureNftsAsCollateral([collData]);

    // Borrow 40 WETH
    await pool
      .connect(borrower.signer)
      .borrow(weth.address, parseEther("40"), bayc.address, tokenId, borrower.address, "0");

    /*//////////////////////////////////////////////////////////////
                        LOWER HEALTH FACTOR AND BID
    //////////////////////////////////////////////////////////////*/
    await nftOracle.setNFTPrice(bayc.address, tokenId, parseEther("50"));

    //mints WETH to the bidder
    await fundWithERC20("WETH", bidder.address, "1000");
    await approveERC20(testEnv, bidder, "WETH");
    await pool.connect(bidder.signer).auction(bayc.address, tokenId, parseEther("50"), bidder.address);

    /*//////////////////////////////////////////////////////////////
                      LIQUIDATE RESERVOIR
    //////////////////////////////////////////////////////////////*/

    const calldata =
      "0xb88d4fdf000000000000000000000000" +
      reservoirAdapter.address.substring(2) +
      "000000000000000000000000fb3f14829f15b1303d6ca677e3fae5a558e064d1000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000984760f2a0b000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000fb3f14829f15b1303d6ca677e3fae5a558e064d10000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008846baab5f700000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000fb63b055ff1816024a8bfcc879be92c5bc4f2089000000000000000000000000fb63b055ff1816024a8bfcc879be92c5bc4f20890000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000b3dbf4147183492a7bc544e8abed20ad6831fecb000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064087fab000000000000000000000000000000000000000000000000000000006408832e0000000000000000000000000000000000000000000000000000000000000000360c6ebe000000000000000000000000000000000000000026c78aebad7fbc860000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003afe244a5796b0000000000000000000000000000000000000000000000000003afe244a5796b000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000bc4ca0eda7647a8ab7c2061c2e118a18a936f13d207eef14821002816f96350da595843e28782087ede1db7a5647f691a212841700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b3dbf4147183492a7bc544e8abed20ad6831fecb0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004b82bdcfcc4600000000000000000000000000000000000000000000000000004b82bdcfcc46000000000000000000000000000a858ddc0445d8131dac4d1de01f834ffcba52ef100000000000000000000000000000000000000000000000000000000000000406974060a90b8b12758a860945c434a158cd49d288b5ecef17ea2bb14e9decd10948f04d95c837c3cf4c66bb0c392b22a59cfd89293dbaefbfb594a4dab681aa0000000000000000000000000000000000000000000000000000000000000000e26609d2ce05747845086b3e8fe1d860b197f6e6887bd583db52d3aafb254f1a4c193aa5247044972d2a9814854c6279606b3c44ca3acf453c6e8b6835b8acaddf657bf8def118cb6c92e7b8fd5e24e4e9e104bb1c7c71b18ea2959c1b238d4e51e4a619b4a71552ffd25a574e261af689997eac38d6bcca3f636b08883d743924aec8da1689ae1222e15de516cc5b0afda0014bd925c8c59af101440e3eb1009c4fa06f35d8e0628f0e96e84465ff9dd321d80256fc865245a57a6052e531d6d817af8f034eee8397ebe1ac02f18f397b7cd42a527f60561af7c432907c3163ecdb7502ebe77cb7ae589a320f1abab044d56e0ffc1ee8cc84f70c8e86c5a4442fd3a7161df6ebccdbae3729fe90646698c98e033fcc37392a8340217755ddfa66d1a692f06d21cc9568f5ac60513d4eee6dafbddcce8e813f2ecbdca372015152451117f4aa302390e12848c743adc278138cf28f270664b6880a67b4e18a4f1ef6273e5ad1ceef2c956077689c8b8d5e65ab636caa099db1d8bf0d117da5f197533ce38604490efbfaa7614bff7fd7f733fb2198dd15007bba13c653ffff40a99a5281a337fe69d7724160ba8726d55eb42dbbef9154978857e78f5a2bec7e200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    await expect(reservoirAdapter.liquidateReservoir(bayc.address, weth.address, calldata, "0")).to.be.revertedWith(
      "InvalidSafeTransferFromExpectedSelector()"
    );
  });
  it("ReservoirAdapter: check liquidation passing an invalid safeTransferFrom `from` param address", async () => {
    const { reservoirAdapter, bayc, pool, nftOracle, weth, deployer, users, configurator } = testEnv;
    const depositor = users[1];
    const borrower = users[2];
    const bidder = users[3];
    const tokenId = "100";
    /*//////////////////////////////////////////////////////////////
                        BORROW PROCESS
    //////////////////////////////////////////////////////////////*/

    //mints WETH to the depositor
    await fundWithERC20("WETH", depositor.address, "1000");
    await approveERC20(testEnv, depositor, "WETH");

    //deposits WETH
    const amountDeposit = await convertToCurrencyDecimals(depositor, weth, "1000");

    await pool.connect(depositor.signer).deposit(weth.address, amountDeposit, depositor.address, "0");

    //mints BAYC to borrower
    await fundWithERC721("BAYC", borrower.address, parseInt(tokenId));
    //approve protocol to access borrower wallet
    await setApprovalForAll(testEnv, borrower, "BAYC");

    //borrows
    const collData: IConfigNftAsCollateralInput = {
      asset: bayc.address,
      nftTokenId: tokenId,
      newPrice: parseEther("100"), //100 ETH valuation
      ltv: 6000,
      liquidationThreshold: 7500,
      redeemThreshold: 5000,
      liquidationBonus: 500,
      redeemDuration: 100,
      auctionDuration: 200,
      redeemFine: 500,
      minBidFine: 2000,
    };

    await configurator.connect(deployer.signer).configureNftsAsCollateral([collData]);

    // Borrow 40 WETH
    await pool
      .connect(borrower.signer)
      .borrow(weth.address, parseEther("40"), bayc.address, tokenId, borrower.address, "0");

    /*//////////////////////////////////////////////////////////////
                        LOWER HEALTH FACTOR AND BID
    //////////////////////////////////////////////////////////////*/
    await nftOracle.setNFTPrice(bayc.address, tokenId, parseEther("50"));

    //mints WETH to the bidder
    await fundWithERC20("WETH", bidder.address, "1000");
    await approveERC20(testEnv, bidder, "WETH");
    await pool.connect(bidder.signer).auction(bayc.address, tokenId, parseEther("50"), bidder.address);

    /*//////////////////////////////////////////////////////////////
                      LIQUIDATE RESERVOIR
    //////////////////////////////////////////////////////////////*/

    const calldata =
      "0xb88d4fde000000000000000000000000fb63b055ff1816024a8bfcc879be92c5bc4f2089000000000000000000000000fb3f14829f15b1303d6ca677e3fae5a558e064d1000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000984760f2a0b000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000fb3f14829f15b1303d6ca677e3fae5a558e064d10000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008846baab5f700000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000fb63b055ff1816024a8bfcc879be92c5bc4f2089000000000000000000000000fb63b055ff1816024a8bfcc879be92c5bc4f20890000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000b3dbf4147183492a7bc544e8abed20ad6831fecb000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064087fab000000000000000000000000000000000000000000000000000000006408832e0000000000000000000000000000000000000000000000000000000000000000360c6ebe000000000000000000000000000000000000000026c78aebad7fbc860000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003afe244a5796b0000000000000000000000000000000000000000000000000003afe244a5796b000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000bc4ca0eda7647a8ab7c2061c2e118a18a936f13d207eef14821002816f96350da595843e28782087ede1db7a5647f691a212841700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b3dbf4147183492a7bc544e8abed20ad6831fecb0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004b82bdcfcc4600000000000000000000000000000000000000000000000000004b82bdcfcc46000000000000000000000000000a858ddc0445d8131dac4d1de01f834ffcba52ef100000000000000000000000000000000000000000000000000000000000000406974060a90b8b12758a860945c434a158cd49d288b5ecef17ea2bb14e9decd10948f04d95c837c3cf4c66bb0c392b22a59cfd89293dbaefbfb594a4dab681aa0000000000000000000000000000000000000000000000000000000000000000e26609d2ce05747845086b3e8fe1d860b197f6e6887bd583db52d3aafb254f1a4c193aa5247044972d2a9814854c6279606b3c44ca3acf453c6e8b6835b8acaddf657bf8def118cb6c92e7b8fd5e24e4e9e104bb1c7c71b18ea2959c1b238d4e51e4a619b4a71552ffd25a574e261af689997eac38d6bcca3f636b08883d743924aec8da1689ae1222e15de516cc5b0afda0014bd925c8c59af101440e3eb1009c4fa06f35d8e0628f0e96e84465ff9dd321d80256fc865245a57a6052e531d6d817af8f034eee8397ebe1ac02f18f397b7cd42a527f60561af7c432907c3163ecdb7502ebe77cb7ae589a320f1abab044d56e0ffc1ee8cc84f70c8e86c5a4442fd3a7161df6ebccdbae3729fe90646698c98e033fcc37392a8340217755ddfa66d1a692f06d21cc9568f5ac60513d4eee6dafbddcce8e813f2ecbdca372015152451117f4aa302390e12848c743adc278138cf28f270664b6880a67b4e18a4f1ef6273e5ad1ceef2c956077689c8b8d5e65ab636caa099db1d8bf0d117da5f197533ce38604490efbfaa7614bff7fd7f733fb2198dd15007bba13c653ffff40a99a5281a337fe69d7724160ba8726d55eb42dbbef9154978857e78f5a2bec7e200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    await expect(reservoirAdapter.liquidateReservoir(bayc.address, weth.address, calldata, "0")).to.be.revertedWith(
      "InvalidReservoirFromAddress()"
    );
  });
  it("ReservoirAdapter: check liquidation passing an invalid safeTransferFrom `to` module address", async () => {
    const { reservoirAdapter, bayc, pool, nftOracle, weth, deployer, users, configurator } = testEnv;
    const depositor = users[1];
    const borrower = users[2];
    const bidder = users[3];
    const tokenId = "100";
    /*//////////////////////////////////////////////////////////////
                        BORROW PROCESS
    //////////////////////////////////////////////////////////////*/

    //mints WETH to the depositor
    await fundWithERC20("WETH", depositor.address, "1000");
    await approveERC20(testEnv, depositor, "WETH");

    //deposits WETH
    const amountDeposit = await convertToCurrencyDecimals(depositor, weth, "1000");

    await pool.connect(depositor.signer).deposit(weth.address, amountDeposit, depositor.address, "0");

    //mints BAYC to borrower
    await fundWithERC721("BAYC", borrower.address, parseInt(tokenId));
    //approve protocol to access borrower wallet
    await setApprovalForAll(testEnv, borrower, "BAYC");

    //borrows
    const collData: IConfigNftAsCollateralInput = {
      asset: bayc.address,
      nftTokenId: tokenId,
      newPrice: parseEther("100"), //100 ETH valuation
      ltv: 6000,
      liquidationThreshold: 7500,
      redeemThreshold: 5000,
      liquidationBonus: 500,
      redeemDuration: 100,
      auctionDuration: 200,
      redeemFine: 500,
      minBidFine: 2000,
    };

    await configurator.connect(deployer.signer).configureNftsAsCollateral([collData]);

    // Borrow 40 WETH
    await pool
      .connect(borrower.signer)
      .borrow(weth.address, parseEther("40"), bayc.address, tokenId, borrower.address, "0");

    /*//////////////////////////////////////////////////////////////
                        LOWER HEALTH FACTOR AND BID
    //////////////////////////////////////////////////////////////*/
    await nftOracle.setNFTPrice(bayc.address, tokenId, parseEther("50"));

    //mints WETH to the bidder
    await fundWithERC20("WETH", bidder.address, "1000");
    await approveERC20(testEnv, bidder, "WETH");
    await pool.connect(bidder.signer).auction(bayc.address, tokenId, parseEther("50"), bidder.address);

    /*//////////////////////////////////////////////////////////////
                      LIQUIDATE RESERVOIR
    //////////////////////////////////////////////////////////////*/

    const calldata =
      "0xb88d4fde000000000000000000000000" +
      reservoirAdapter.address.substring(2) +
      "000000000000000000000000fb63b055ff1816024a8bfcc879be92c5bc4f2089000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000984760f2a0b000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000fb3f14829f15b1303d6ca677e3fae5a558e064d10000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008846baab5f700000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000fb63b055ff1816024a8bfcc879be92c5bc4f2089000000000000000000000000fb63b055ff1816024a8bfcc879be92c5bc4f20890000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000b3dbf4147183492a7bc544e8abed20ad6831fecb000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064087fab000000000000000000000000000000000000000000000000000000006408832e0000000000000000000000000000000000000000000000000000000000000000360c6ebe000000000000000000000000000000000000000026c78aebad7fbc860000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003afe244a5796b0000000000000000000000000000000000000000000000000003afe244a5796b000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000bc4ca0eda7647a8ab7c2061c2e118a18a936f13d207eef14821002816f96350da595843e28782087ede1db7a5647f691a212841700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b3dbf4147183492a7bc544e8abed20ad6831fecb0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004b82bdcfcc4600000000000000000000000000000000000000000000000000004b82bdcfcc46000000000000000000000000000a858ddc0445d8131dac4d1de01f834ffcba52ef100000000000000000000000000000000000000000000000000000000000000406974060a90b8b12758a860945c434a158cd49d288b5ecef17ea2bb14e9decd10948f04d95c837c3cf4c66bb0c392b22a59cfd89293dbaefbfb594a4dab681aa0000000000000000000000000000000000000000000000000000000000000000e26609d2ce05747845086b3e8fe1d860b197f6e6887bd583db52d3aafb254f1a4c193aa5247044972d2a9814854c6279606b3c44ca3acf453c6e8b6835b8acaddf657bf8def118cb6c92e7b8fd5e24e4e9e104bb1c7c71b18ea2959c1b238d4e51e4a619b4a71552ffd25a574e261af689997eac38d6bcca3f636b08883d743924aec8da1689ae1222e15de516cc5b0afda0014bd925c8c59af101440e3eb1009c4fa06f35d8e0628f0e96e84465ff9dd321d80256fc865245a57a6052e531d6d817af8f034eee8397ebe1ac02f18f397b7cd42a527f60561af7c432907c3163ecdb7502ebe77cb7ae589a320f1abab044d56e0ffc1ee8cc84f70c8e86c5a4442fd3a7161df6ebccdbae3729fe90646698c98e033fcc37392a8340217755ddfa66d1a692f06d21cc9568f5ac60513d4eee6dafbddcce8e813f2ecbdca372015152451117f4aa302390e12848c743adc278138cf28f270664b6880a67b4e18a4f1ef6273e5ad1ceef2c956077689c8b8d5e65ab636caa099db1d8bf0d117da5f197533ce38604490efbfaa7614bff7fd7f733fb2198dd15007bba13c653ffff40a99a5281a337fe69d7724160ba8726d55eb42dbbef9154978857e78f5a2bec7e200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    await expect(reservoirAdapter.liquidateReservoir(bayc.address, weth.address, calldata, "0")).to.be.revertedWith(
      "InvalidReservoirModule()"
    );
  });
  it("ReservoirAdapter: check liquidation passing an invalid execute function selector", async () => {
    const { reservoirAdapter, bayc, pool, nftOracle, weth, deployer, users, configurator } = testEnv;
    const depositor = users[1];
    const borrower = users[2];
    const bidder = users[3];
    const tokenId = "100";
    /*//////////////////////////////////////////////////////////////
                        BORROW PROCESS
    //////////////////////////////////////////////////////////////*/

    //mints WETH to the depositor
    await fundWithERC20("WETH", depositor.address, "1000");
    await approveERC20(testEnv, depositor, "WETH");

    //deposits WETH
    const amountDeposit = await convertToCurrencyDecimals(depositor, weth, "1000");

    await pool.connect(depositor.signer).deposit(weth.address, amountDeposit, depositor.address, "0");

    //mints BAYC to borrower
    await fundWithERC721("BAYC", borrower.address, parseInt(tokenId));
    //approve protocol to access borrower wallet
    await setApprovalForAll(testEnv, borrower, "BAYC");

    //borrows
    const collData: IConfigNftAsCollateralInput = {
      asset: bayc.address,
      nftTokenId: tokenId,
      newPrice: parseEther("100"), //100 ETH valuation
      ltv: 6000,
      liquidationThreshold: 7500,
      redeemThreshold: 5000,
      liquidationBonus: 500,
      redeemDuration: 100,
      auctionDuration: 200,
      redeemFine: 500,
      minBidFine: 2000,
    };

    await configurator.connect(deployer.signer).configureNftsAsCollateral([collData]);

    // Borrow 40 WETH
    await pool
      .connect(borrower.signer)
      .borrow(weth.address, parseEther("40"), bayc.address, tokenId, borrower.address, "0");

    /*//////////////////////////////////////////////////////////////
                        LOWER HEALTH FACTOR AND BID
    //////////////////////////////////////////////////////////////*/
    await nftOracle.setNFTPrice(bayc.address, tokenId, parseEther("50"));

    //mints WETH to the bidder
    await fundWithERC20("WETH", bidder.address, "1000");
    await approveERC20(testEnv, bidder, "WETH");
    await pool.connect(bidder.signer).auction(bayc.address, tokenId, parseEther("50"), bidder.address);

    /*//////////////////////////////////////////////////////////////
                      LIQUIDATE RESERVOIR
    //////////////////////////////////////////////////////////////*/

    const calldata =
      "0xb88d4fde000000000000000000000000" +
      reservoirAdapter.address.substring(2) +
      "000000000000000000000000fb3f14829f15b1303d6ca677e3fae5a558e064d1000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000984760f2a0c000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000fb3f14829f15b1303d6ca677e3fae5a558e064d10000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008846baab5f700000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000fb63b055ff1816024a8bfcc879be92c5bc4f2089000000000000000000000000fb63b055ff1816024a8bfcc879be92c5bc4f20890000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000b3dbf4147183492a7bc544e8abed20ad6831fecb000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064087fab000000000000000000000000000000000000000000000000000000006408832e0000000000000000000000000000000000000000000000000000000000000000360c6ebe000000000000000000000000000000000000000026c78aebad7fbc860000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003afe244a5796b0000000000000000000000000000000000000000000000000003afe244a5796b000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000bc4ca0eda7647a8ab7c2061c2e118a18a936f13d207eef14821002816f96350da595843e28782087ede1db7a5647f691a212841700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b3dbf4147183492a7bc544e8abed20ad6831fecb0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004b82bdcfcc4600000000000000000000000000000000000000000000000000004b82bdcfcc46000000000000000000000000000a858ddc0445d8131dac4d1de01f834ffcba52ef100000000000000000000000000000000000000000000000000000000000000406974060a90b8b12758a860945c434a158cd49d288b5ecef17ea2bb14e9decd10948f04d95c837c3cf4c66bb0c392b22a59cfd89293dbaefbfb594a4dab681aa0000000000000000000000000000000000000000000000000000000000000000e26609d2ce05747845086b3e8fe1d860b197f6e6887bd583db52d3aafb254f1a4c193aa5247044972d2a9814854c6279606b3c44ca3acf453c6e8b6835b8acaddf657bf8def118cb6c92e7b8fd5e24e4e9e104bb1c7c71b18ea2959c1b238d4e51e4a619b4a71552ffd25a574e261af689997eac38d6bcca3f636b08883d743924aec8da1689ae1222e15de516cc5b0afda0014bd925c8c59af101440e3eb1009c4fa06f35d8e0628f0e96e84465ff9dd321d80256fc865245a57a6052e531d6d817af8f034eee8397ebe1ac02f18f397b7cd42a527f60561af7c432907c3163ecdb7502ebe77cb7ae589a320f1abab044d56e0ffc1ee8cc84f70c8e86c5a4442fd3a7161df6ebccdbae3729fe90646698c98e033fcc37392a8340217755ddfa66d1a692f06d21cc9568f5ac60513d4eee6dafbddcce8e813f2ecbdca372015152451117f4aa302390e12848c743adc278138cf28f270664b6880a67b4e18a4f1ef6273e5ad1ceef2c956077689c8b8d5e65ab636caa099db1d8bf0d117da5f197533ce38604490efbfaa7614bff7fd7f733fb2198dd15007bba13c653ffff40a99a5281a337fe69d7724160ba8726d55eb42dbbef9154978857e78f5a2bec7e200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    await expect(reservoirAdapter.liquidateReservoir(bayc.address, weth.address, calldata, "0")).to.be.revertedWith(
      "InvalidExecuteExpectedSelector()"
    );
  });
  it("ReservoirAdapter: check liquidation passing an invalid module on `execute`", async () => {
    const { reservoirAdapter, bayc, pool, nftOracle, weth, deployer, users, configurator } = testEnv;
    const depositor = users[1];
    const borrower = users[2];
    const bidder = users[3];
    const tokenId = "100";
    /*//////////////////////////////////////////////////////////////
                        BORROW PROCESS
    //////////////////////////////////////////////////////////////*/

    //mints WETH to the depositor
    await fundWithERC20("WETH", depositor.address, "1000");
    await approveERC20(testEnv, depositor, "WETH");

    //deposits WETH
    const amountDeposit = await convertToCurrencyDecimals(depositor, weth, "1000");

    await pool.connect(depositor.signer).deposit(weth.address, amountDeposit, depositor.address, "0");

    //mints BAYC to borrower
    await fundWithERC721("BAYC", borrower.address, parseInt(tokenId));
    //approve protocol to access borrower wallet
    await setApprovalForAll(testEnv, borrower, "BAYC");

    //borrows
    const collData: IConfigNftAsCollateralInput = {
      asset: bayc.address,
      nftTokenId: tokenId,
      newPrice: parseEther("100"), //100 ETH valuation
      ltv: 6000,
      liquidationThreshold: 7500,
      redeemThreshold: 5000,
      liquidationBonus: 500,
      redeemDuration: 100,
      auctionDuration: 200,
      redeemFine: 500,
      minBidFine: 2000,
    };

    await configurator.connect(deployer.signer).configureNftsAsCollateral([collData]);

    // Borrow 40 WETH
    await pool
      .connect(borrower.signer)
      .borrow(weth.address, parseEther("40"), bayc.address, tokenId, borrower.address, "0");

    /*//////////////////////////////////////////////////////////////
                        LOWER HEALTH FACTOR AND BID
    //////////////////////////////////////////////////////////////*/
    await nftOracle.setNFTPrice(bayc.address, tokenId, parseEther("50"));

    //mints WETH to the bidder
    await fundWithERC20("WETH", bidder.address, "1000");
    await approveERC20(testEnv, bidder, "WETH");
    await pool.connect(bidder.signer).auction(bayc.address, tokenId, parseEther("50"), bidder.address);

    /*//////////////////////////////////////////////////////////////
                      LIQUIDATE RESERVOIR
    //////////////////////////////////////////////////////////////*/

    const calldata =
      "0xb88d4fde000000000000000000000000" +
      reservoirAdapter.address.substring(2) +
      "000000000000000000000000fb3f14829f15b1303d6ca677e3fae5a558e064d1000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000984760f2a0b000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000fb3f14829f15b1303d6ca677e3fae5a558e064d20000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008846baab5f700000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000fb63b055ff1816024a8bfcc879be92c5bc4f2089000000000000000000000000fb63b055ff1816024a8bfcc879be92c5bc4f20890000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000b3dbf4147183492a7bc544e8abed20ad6831fecb000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064087fab000000000000000000000000000000000000000000000000000000006408832e0000000000000000000000000000000000000000000000000000000000000000360c6ebe000000000000000000000000000000000000000026c78aebad7fbc860000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003afe244a5796b0000000000000000000000000000000000000000000000000003afe244a5796b000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000bc4ca0eda7647a8ab7c2061c2e118a18a936f13d207eef14821002816f96350da595843e28782087ede1db7a5647f691a212841700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b3dbf4147183492a7bc544e8abed20ad6831fecb0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004b82bdcfcc4600000000000000000000000000000000000000000000000000004b82bdcfcc46000000000000000000000000000a858ddc0445d8131dac4d1de01f834ffcba52ef100000000000000000000000000000000000000000000000000000000000000406974060a90b8b12758a860945c434a158cd49d288b5ecef17ea2bb14e9decd10948f04d95c837c3cf4c66bb0c392b22a59cfd89293dbaefbfb594a4dab681aa0000000000000000000000000000000000000000000000000000000000000000e26609d2ce05747845086b3e8fe1d860b197f6e6887bd583db52d3aafb254f1a4c193aa5247044972d2a9814854c6279606b3c44ca3acf453c6e8b6835b8acaddf657bf8def118cb6c92e7b8fd5e24e4e9e104bb1c7c71b18ea2959c1b238d4e51e4a619b4a71552ffd25a574e261af689997eac38d6bcca3f636b08883d743924aec8da1689ae1222e15de516cc5b0afda0014bd925c8c59af101440e3eb1009c4fa06f35d8e0628f0e96e84465ff9dd321d80256fc865245a57a6052e531d6d817af8f034eee8397ebe1ac02f18f397b7cd42a527f60561af7c432907c3163ecdb7502ebe77cb7ae589a320f1abab044d56e0ffc1ee8cc84f70c8e86c5a4442fd3a7161df6ebccdbae3729fe90646698c98e033fcc37392a8340217755ddfa66d1a692f06d21cc9568f5ac60513d4eee6dafbddcce8e813f2ecbdca372015152451117f4aa302390e12848c743adc278138cf28f270664b6880a67b4e18a4f1ef6273e5ad1ceef2c956077689c8b8d5e65ab636caa099db1d8bf0d117da5f197533ce38604490efbfaa7614bff7fd7f733fb2198dd15007bba13c653ffff40a99a5281a337fe69d7724160ba8726d55eb42dbbef9154978857e78f5a2bec7e200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    await expect(reservoirAdapter.liquidateReservoir(bayc.address, weth.address, calldata, "0")).to.be.revertedWith(
      "InvalidReservoirModuleOnExecute()"
    );
  });

  it("ReservoirAdapter: liquidated amount is less than expected liquidate amount", async () => {
    if (FORK_BLOCK_NUMBER == "16784435") {
      //block number for calldata for BAYC #100

      const { reservoirAdapter, bayc, pool, nftOracle, weth, deployer, users, configurator } = testEnv;
      const depositor = users[1];
      const borrower = users[2];
      const bidder = users[3];
      const tokenId = "100";

      /*//////////////////////////////////////////////////////////////
                        BORROW PROCESS
      //////////////////////////////////////////////////////////////*/

      //mints WETH to the depositor
      await fundWithERC20("WETH", depositor.address, "1000");
      await approveERC20(testEnv, depositor, "WETH");

      //deposits WETH
      const amountDeposit = await convertToCurrencyDecimals(depositor, weth, "1000");

      await pool.connect(depositor.signer).deposit(weth.address, amountDeposit, depositor.address, "0");

      //mints BAYC to borrower
      await fundWithERC721("BAYC", borrower.address, parseInt(tokenId));
      //approve protocol to access borrower wallet
      await setApprovalForAll(testEnv, borrower, "BAYC");

      //borrows
      const collData: IConfigNftAsCollateralInput = {
        asset: bayc.address,
        nftTokenId: tokenId,
        newPrice: parseEther("100"), //100 ETH valuation
        ltv: 6000,
        liquidationThreshold: 7500,
        redeemThreshold: 5000,
        liquidationBonus: 500,
        redeemDuration: 100,
        auctionDuration: 200,
        redeemFine: 500,
        minBidFine: 2000,
      };

      await configurator.connect(deployer.signer).configureNftsAsCollateral([collData]);

      // Borrow 40 WETH
      await pool
        .connect(borrower.signer)
        .borrow(weth.address, parseEther("40"), bayc.address, tokenId, borrower.address, "0");

      /*//////////////////////////////////////////////////////////////
                        LOWER HEALTH FACTOR
      //////////////////////////////////////////////////////////////*/
      await nftOracle.setNFTPrice(bayc.address, tokenId, parseEther("50"));

      /*//////////////////////////////////////////////////////////////
                      SETUP SEAPORT v1.4 LISTING
      //////////////////////////////////////////////////////////////*/
      const calldata =
        "0xb88d4fde000000000000000000000000" +
        reservoirAdapter.address.substring(2) +
        "000000000000000000000000385df8cbc196f5f780367f3cdc96af072a916f7e0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000004e4760f2a0b000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000385df8cbc196f5f780367f3cdc96af072a916f7e0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e4267bf79700000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000" +
        reservoirAdapter.address.substring(2) +
        "000000000000000000000000" +
        reservoirAdapter.address.substring(2) +
        "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000385df8cbc196f5f780367f3cdc96af072a916f7e000000000000000000000000000000000000000000000003bd913e6c1df400000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000264800000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005705b71c9581208fbab754562447185b6895f3ac000000000000000000000000bc4ca0eda7647a8ab7c2061c2e118a18a936f13d000000000000000000000000000000000000000000000003bd913e6c1df400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000009f93623019049c76209c26517acc2af9d49c69b000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000c1000000000000000000000000000000000000000000000000000000006407bf9c000000000000000000000000000000000000000000000000000000006409111900000000000000000000000000000000000000000000000000000000000026480000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001c9cfd9548580c9e5edffd87574fe96125ac7fd541750c44c1265e4fb92522fb2a7a5e5bd0f77641238feb100af3db4995e97d49e12076c97421a43461857a12c4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
      /*//////////////////////////////////////////////////////////////
                      LIQUIDATE RESERVOIR (expect 100 WETH after liquidation)
      //////////////////////////////////////////////////////////////*/
      await expect(
        reservoirAdapter.liquidateReservoir(bayc.address, weth.address, calldata, parseEther("100"))
      ).to.be.revertedWith("InvalidLiquidateAmount()");
    }
  });
  it("ReservoirAdapter: treasury not able to cover extra debt amount due to not having enough funds", async () => {
    if (FORK_BLOCK_NUMBER == "16784435") {
      //block number for calldata for BAYC #100

      const { reservoirAdapter, bayc, pool, nftOracle, weth, deployer, users, configurator } = testEnv;
      const depositor = users[1];
      const borrower = users[2];
      const bidder = users[3];
      const tokenId = "100";

      /*//////////////////////////////////////////////////////////////
                        BORROW PROCESS
      //////////////////////////////////////////////////////////////*/

      //mints WETH to the depositor
      await fundWithERC20("WETH", depositor.address, "1000");
      await approveERC20(testEnv, depositor, "WETH");

      //deposits WETH
      const amountDeposit = await convertToCurrencyDecimals(depositor, weth, "1000");

      await pool.connect(depositor.signer).deposit(weth.address, amountDeposit, depositor.address, "0");

      //mints BAYC to borrower
      await fundWithERC721("BAYC", borrower.address, parseInt(tokenId));
      //approve protocol to access borrower wallet
      await setApprovalForAll(testEnv, borrower, "BAYC");

      //borrows
      const collData: IConfigNftAsCollateralInput = {
        asset: bayc.address,
        nftTokenId: tokenId,
        newPrice: parseEther("400"), //400 ETH valuation
        ltv: 6000,
        liquidationThreshold: 7500,
        redeemThreshold: 5000,
        liquidationBonus: 500,
        redeemDuration: 100,
        auctionDuration: 200,
        redeemFine: 500,
        minBidFine: 2000,
      };

      await configurator.connect(deployer.signer).configureNftsAsCollateral([collData]);

      // Borrow 180 WETH
      await pool
        .connect(borrower.signer)
        .borrow(weth.address, parseEther("180"), bayc.address, tokenId, borrower.address, "0");

      /*//////////////////////////////////////////////////////////////
                        LOWER HEALTH FACTOR
      //////////////////////////////////////////////////////////////*/
      await nftOracle.setNFTPrice(bayc.address, tokenId, parseEther("10"));

      /*//////////////////////////////////////////////////////////////
                      SETUP SEAPORT v1.4 LISTING
      //////////////////////////////////////////////////////////////*/
      const calldata =
        "0xb88d4fde000000000000000000000000" +
        reservoirAdapter.address.substring(2) +
        "000000000000000000000000385df8cbc196f5f780367f3cdc96af072a916f7e0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000004e4760f2a0b000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000385df8cbc196f5f780367f3cdc96af072a916f7e0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e4267bf79700000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000" +
        reservoirAdapter.address.substring(2) +
        "000000000000000000000000" +
        reservoirAdapter.address.substring(2) +
        "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000385df8cbc196f5f780367f3cdc96af072a916f7e000000000000000000000000000000000000000000000003bd913e6c1df400000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000264800000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005705b71c9581208fbab754562447185b6895f3ac000000000000000000000000bc4ca0eda7647a8ab7c2061c2e118a18a936f13d000000000000000000000000000000000000000000000003bd913e6c1df400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000009f93623019049c76209c26517acc2af9d49c69b000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000c1000000000000000000000000000000000000000000000000000000006407bf9c000000000000000000000000000000000000000000000000000000006409111900000000000000000000000000000000000000000000000000000000000026480000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001c9cfd9548580c9e5edffd87574fe96125ac7fd541750c44c1265e4fb92522fb2a7a5e5bd0f77641238feb100af3db4995e97d49e12076c97421a43461857a12c4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
      /*//////////////////////////////////////////////////////////////
                      LIQUIDATE RESERVOIR 
      //////////////////////////////////////////////////////////////*/
      await expect(
        reservoirAdapter.liquidateReservoir(bayc.address, weth.address, calldata, parseEther("67.62"))
      ).to.be.revertedWith("InsufficientTreasuryBalance()");
    }
  });
  it("ReservoirAdapter: user 1 transfers 100 WETH directly to reservoir, tries to retrieve with wrong rescuer", async () => {
    const { users, weth, reservoirAdapter, deployer } = testEnv;
    const user1 = users[1];
    await fundWithERC20("WETH", user1.address, "1000");
    await weth
      .connect(user1.signer)
      .transfer(reservoirAdapter.address, await convertToCurrencyDecimals(user1, weth, "100"));
    //Set new rescuer
    await reservoirAdapter.connect(deployer.signer).updateRescuer(deployer.address);
    expect(
      testEnv.reservoirAdapter
        .connect(user1.signer)
        .rescue(weth.address, user1.address, await convertToCurrencyDecimals(user1, weth, "100"), false)
    ).to.be.revertedWith("Rescuable: caller is not the rescuer");
  });
  it("ReservoirAdapter: user 1 transfers 1 BAYC directly to reservoir, tries to retrieve with wrong rescuer", async () => {
    const { users, bayc, reservoirAdapter, deployer } = testEnv;
    const user1 = users[1];

    await fundWithERC721("BAYC", user1.address, 1318);

    await bayc
      .connect(user1.signer)
      ["safeTransferFrom(address,address,uint256)"](user1.address, reservoirAdapter.address, "1318");

    expect(
      testEnv.reservoirAdapter.connect(user1.signer).rescueNFT(bayc.address, "1318", user1.address)
    ).to.be.revertedWith("Rescuable: caller is not the rescuer");
  });
});
