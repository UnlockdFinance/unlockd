
> @unlockddao/unlockd-protocol@1.0.2 test
> npm run compile && TS_NODE_TRANSPILE_ONLY=1 hardhat test ./test/*.spec.ts


> @unlockddao/unlockd-protocol@1.0.2 compile
> cross-env SKIP_LOAD=true hardhat compile

Nothing to compile
Creating Typechain artifacts in directory types for target ethers-v5
Successfully generated Typechain artifacts!
/home/fvenancio/Projects/unlockd/unlockd-tasks/tasks
Creating Typechain artifacts in directory types for target ethers-v5
Successfully generated Typechain artifacts!

- Enviroment
  - Network : hardhat
-> Deploying test environment...
Deployer: 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15 Balance: 1000000.0 ETH
PoolAdmin: 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15 Balance: 1000000.0 ETH
EmergencyAdmin: 0x51d25BEeef0193C96CFDA7fff9BD7411C2BdbDd3 Balance: 1000000.0 ETH
LendPool Liquidator: 0xA2874be6Acdc314dd055f6869a2dBdF62c983436 Balance: 1000000.0 ETH
-> Prepare mock external ERC20 Tokens, such as WETH, DAI...
contracts-helpers:registerContractInJsonDb, contractId: WETHMocked address: 0xB4B4ead1A260F1572b88b9D8ABa5A152D166c104 deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
contracts-helpers:registerContractInJsonDb, contractId: WETH address: 0xB4B4ead1A260F1572b88b9D8ABa5A152D166c104 deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
-> Prepare mock external ERC721 NFTs, such as WPUNKS, BAYC...
contracts-helpers:registerContractInJsonDb, contractId: CryptoPunksMarket address: 0xa05ffF82bcC0C599984b0839218DC6ee9328d1Fb deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
contracts-helpers:registerContractInJsonDb, contractId: WrappedPunk address: 0x025FE4760c6f14dE878C22cEb09A3235F16dAe53 deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
contracts-helpers:registerContractInJsonDb, contractId: WPUNKS address: 0x025FE4760c6f14dE878C22cEb09A3235F16dAe53 deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
contracts-helpers:registerContractInJsonDb, contractId: MintableERC721 address: 0xb2f97A3c2E48cd368901657e31Faaa93035CE390 deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
contracts-helpers:registerContractInJsonDb, contractId: BAYC address: 0xb2f97A3c2E48cd368901657e31Faaa93035CE390 deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
contracts-helpers:registerContractInJsonDb, contractId: MintableERC721 address: 0x5a60c5d89A0A0e08ae0CAe73453e3AcC9C335847 deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
contracts-helpers:registerContractInJsonDb, contractId: DOODLE address: 0x5a60c5d89A0A0e08ae0CAe73453e3AcC9C335847 deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
contracts-helpers:registerContractInJsonDb, contractId: MintableERC721 address: 0x4e07D87De1CF586D51C3665e6a4d36eB9d99a457 deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
contracts-helpers:registerContractInJsonDb, contractId: AZUKI address: 0x4e07D87De1CF586D51C3665e6a4d36eB9d99a457 deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
MOCK NFTS:::::: {
  WPUNKS: Contract {
    interface: Interface {
      fragments: [Array],
      _abiCoder: [AbiCoder],
      functions: [Object],
      errors: {},
      events: [Object],
      structs: {},
      deploy: [ConstructorFragment],
      _isInterface: true
    },
    provider: EthersProviderWrapper {
      _isProvider: true,
      _events: [],
      _emitted: [Object],
      disableCcipRead: false,
      formatter: [Formatter],
      anyNetwork: false,
      _networkPromise: [Promise],
      _maxInternalBlockNumber: 0,
      _lastBlockNumber: -2,
      _maxFilterBlockRange: 10,
      _pollingInterval: 4000,
      _fastQueryDate: 1678183301090,
      connection: [Object],
      _nextId: 42,
      _hardhatProvider: [BackwardsCompatibilityProviderAdapter],
      _eventLoopCache: [Object],
      _network: [Object],
      _internalBlockNumber: [Promise],
      _fastBlockNumber: 0,
      _fastBlockNumberPromise: [Promise]
    },
    signer: SignerWithAddress {
      _isSigner: true,
      address: '0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15',
      _signer: [JsonRpcSigner],
      provider: [EthersProviderWrapper]
    },
    callStatic: {
      'approve(address,uint256)': [Function (anonymous)],
      'balanceOf(address)': [Function (anonymous)],
      'burn(uint256)': [Function (anonymous)],
      'getApproved(uint256)': [Function (anonymous)],
      'isApprovedForAll(address,address)': [Function (anonymous)],
      'mint(uint256)': [Function (anonymous)],
      'name()': [Function (anonymous)],
      'owner()': [Function (anonymous)],
      'ownerOf(uint256)': [Function (anonymous)],
      'paused()': [Function (anonymous)],
      'proxyInfo(address)': [Function (anonymous)],
      'punkContract()': [Function (anonymous)],
      'registerProxy()': [Function (anonymous)],
      'renounceOwnership()': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256,bytes)': [Function (anonymous)],
      'setApprovalForAll(address,bool)': [Function (anonymous)],
      'supportsInterface(bytes4)': [Function (anonymous)],
      'symbol()': [Function (anonymous)],
      'tokenByIndex(uint256)': [Function (anonymous)],
      'tokenOfOwnerByIndex(address,uint256)': [Function (anonymous)],
      'tokenURI(uint256)': [Function (anonymous)],
      'totalSupply()': [Function (anonymous)],
      'transferFrom(address,address,uint256)': [Function (anonymous)],
      'transferOwnership(address)': [Function (anonymous)],
      approve: [Function (anonymous)],
      balanceOf: [Function (anonymous)],
      burn: [Function (anonymous)],
      getApproved: [Function (anonymous)],
      isApprovedForAll: [Function (anonymous)],
      mint: [Function (anonymous)],
      name: [Function (anonymous)],
      owner: [Function (anonymous)],
      ownerOf: [Function (anonymous)],
      paused: [Function (anonymous)],
      proxyInfo: [Function (anonymous)],
      punkContract: [Function (anonymous)],
      registerProxy: [Function (anonymous)],
      renounceOwnership: [Function (anonymous)],
      setApprovalForAll: [Function (anonymous)],
      supportsInterface: [Function (anonymous)],
      symbol: [Function (anonymous)],
      tokenByIndex: [Function (anonymous)],
      tokenOfOwnerByIndex: [Function (anonymous)],
      tokenURI: [Function (anonymous)],
      totalSupply: [Function (anonymous)],
      transferFrom: [Function (anonymous)],
      transferOwnership: [Function (anonymous)]
    },
    estimateGas: {
      'approve(address,uint256)': [Function (anonymous)],
      'balanceOf(address)': [Function (anonymous)],
      'burn(uint256)': [Function (anonymous)],
      'getApproved(uint256)': [Function (anonymous)],
      'isApprovedForAll(address,address)': [Function (anonymous)],
      'mint(uint256)': [Function (anonymous)],
      'name()': [Function (anonymous)],
      'owner()': [Function (anonymous)],
      'ownerOf(uint256)': [Function (anonymous)],
      'paused()': [Function (anonymous)],
      'proxyInfo(address)': [Function (anonymous)],
      'punkContract()': [Function (anonymous)],
      'registerProxy()': [Function (anonymous)],
      'renounceOwnership()': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256,bytes)': [Function (anonymous)],
      'setApprovalForAll(address,bool)': [Function (anonymous)],
      'supportsInterface(bytes4)': [Function (anonymous)],
      'symbol()': [Function (anonymous)],
      'tokenByIndex(uint256)': [Function (anonymous)],
      'tokenOfOwnerByIndex(address,uint256)': [Function (anonymous)],
      'tokenURI(uint256)': [Function (anonymous)],
      'totalSupply()': [Function (anonymous)],
      'transferFrom(address,address,uint256)': [Function (anonymous)],
      'transferOwnership(address)': [Function (anonymous)],
      approve: [Function (anonymous)],
      balanceOf: [Function (anonymous)],
      burn: [Function (anonymous)],
      getApproved: [Function (anonymous)],
      isApprovedForAll: [Function (anonymous)],
      mint: [Function (anonymous)],
      name: [Function (anonymous)],
      owner: [Function (anonymous)],
      ownerOf: [Function (anonymous)],
      paused: [Function (anonymous)],
      proxyInfo: [Function (anonymous)],
      punkContract: [Function (anonymous)],
      registerProxy: [Function (anonymous)],
      renounceOwnership: [Function (anonymous)],
      setApprovalForAll: [Function (anonymous)],
      supportsInterface: [Function (anonymous)],
      symbol: [Function (anonymous)],
      tokenByIndex: [Function (anonymous)],
      tokenOfOwnerByIndex: [Function (anonymous)],
      tokenURI: [Function (anonymous)],
      totalSupply: [Function (anonymous)],
      transferFrom: [Function (anonymous)],
      transferOwnership: [Function (anonymous)]
    },
    functions: {
      'approve(address,uint256)': [Function (anonymous)],
      'balanceOf(address)': [Function (anonymous)],
      'burn(uint256)': [Function (anonymous)],
      'getApproved(uint256)': [Function (anonymous)],
      'isApprovedForAll(address,address)': [Function (anonymous)],
      'mint(uint256)': [Function (anonymous)],
      'name()': [Function (anonymous)],
      'owner()': [Function (anonymous)],
      'ownerOf(uint256)': [Function (anonymous)],
      'paused()': [Function (anonymous)],
      'proxyInfo(address)': [Function (anonymous)],
      'punkContract()': [Function (anonymous)],
      'registerProxy()': [Function (anonymous)],
      'renounceOwnership()': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256,bytes)': [Function (anonymous)],
      'setApprovalForAll(address,bool)': [Function (anonymous)],
      'supportsInterface(bytes4)': [Function (anonymous)],
      'symbol()': [Function (anonymous)],
      'tokenByIndex(uint256)': [Function (anonymous)],
      'tokenOfOwnerByIndex(address,uint256)': [Function (anonymous)],
      'tokenURI(uint256)': [Function (anonymous)],
      'totalSupply()': [Function (anonymous)],
      'transferFrom(address,address,uint256)': [Function (anonymous)],
      'transferOwnership(address)': [Function (anonymous)],
      approve: [Function (anonymous)],
      balanceOf: [Function (anonymous)],
      burn: [Function (anonymous)],
      getApproved: [Function (anonymous)],
      isApprovedForAll: [Function (anonymous)],
      mint: [Function (anonymous)],
      name: [Function (anonymous)],
      owner: [Function (anonymous)],
      ownerOf: [Function (anonymous)],
      paused: [Function (anonymous)],
      proxyInfo: [Function (anonymous)],
      punkContract: [Function (anonymous)],
      registerProxy: [Function (anonymous)],
      renounceOwnership: [Function (anonymous)],
      setApprovalForAll: [Function (anonymous)],
      supportsInterface: [Function (anonymous)],
      symbol: [Function (anonymous)],
      tokenByIndex: [Function (anonymous)],
      tokenOfOwnerByIndex: [Function (anonymous)],
      tokenURI: [Function (anonymous)],
      totalSupply: [Function (anonymous)],
      transferFrom: [Function (anonymous)],
      transferOwnership: [Function (anonymous)]
    },
    populateTransaction: {
      'approve(address,uint256)': [Function (anonymous)],
      'balanceOf(address)': [Function (anonymous)],
      'burn(uint256)': [Function (anonymous)],
      'getApproved(uint256)': [Function (anonymous)],
      'isApprovedForAll(address,address)': [Function (anonymous)],
      'mint(uint256)': [Function (anonymous)],
      'name()': [Function (anonymous)],
      'owner()': [Function (anonymous)],
      'ownerOf(uint256)': [Function (anonymous)],
      'paused()': [Function (anonymous)],
      'proxyInfo(address)': [Function (anonymous)],
      'punkContract()': [Function (anonymous)],
      'registerProxy()': [Function (anonymous)],
      'renounceOwnership()': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256,bytes)': [Function (anonymous)],
      'setApprovalForAll(address,bool)': [Function (anonymous)],
      'supportsInterface(bytes4)': [Function (anonymous)],
      'symbol()': [Function (anonymous)],
      'tokenByIndex(uint256)': [Function (anonymous)],
      'tokenOfOwnerByIndex(address,uint256)': [Function (anonymous)],
      'tokenURI(uint256)': [Function (anonymous)],
      'totalSupply()': [Function (anonymous)],
      'transferFrom(address,address,uint256)': [Function (anonymous)],
      'transferOwnership(address)': [Function (anonymous)],
      approve: [Function (anonymous)],
      balanceOf: [Function (anonymous)],
      burn: [Function (anonymous)],
      getApproved: [Function (anonymous)],
      isApprovedForAll: [Function (anonymous)],
      mint: [Function (anonymous)],
      name: [Function (anonymous)],
      owner: [Function (anonymous)],
      ownerOf: [Function (anonymous)],
      paused: [Function (anonymous)],
      proxyInfo: [Function (anonymous)],
      punkContract: [Function (anonymous)],
      registerProxy: [Function (anonymous)],
      renounceOwnership: [Function (anonymous)],
      setApprovalForAll: [Function (anonymous)],
      supportsInterface: [Function (anonymous)],
      symbol: [Function (anonymous)],
      tokenByIndex: [Function (anonymous)],
      tokenOfOwnerByIndex: [Function (anonymous)],
      tokenURI: [Function (anonymous)],
      totalSupply: [Function (anonymous)],
      transferFrom: [Function (anonymous)],
      transferOwnership: [Function (anonymous)]
    },
    filters: {
      'Approval(address,address,uint256)': [Function (anonymous)],
      'ApprovalForAll(address,address,bool)': [Function (anonymous)],
      'OwnershipTransferred(address,address)': [Function (anonymous)],
      'Paused(address)': [Function (anonymous)],
      'ProxyRegistered(address,address)': [Function (anonymous)],
      'Transfer(address,address,uint256)': [Function (anonymous)],
      'Unpaused(address)': [Function (anonymous)],
      Approval: [Function (anonymous)],
      ApprovalForAll: [Function (anonymous)],
      OwnershipTransferred: [Function (anonymous)],
      Paused: [Function (anonymous)],
      ProxyRegistered: [Function (anonymous)],
      Transfer: [Function (anonymous)],
      Unpaused: [Function (anonymous)]
    },
    _runningEvents: {},
    _wrappedEmits: {},
    address: '0x025FE4760c6f14dE878C22cEb09A3235F16dAe53',
    resolvedAddress: Promise { '0x025FE4760c6f14dE878C22cEb09A3235F16dAe53' },
    'approve(address,uint256)': [Function (anonymous)],
    'balanceOf(address)': [Function (anonymous)],
    'burn(uint256)': [Function (anonymous)],
    'getApproved(uint256)': [Function (anonymous)],
    'isApprovedForAll(address,address)': [Function (anonymous)],
    'mint(uint256)': [Function (anonymous)],
    'name()': [Function (anonymous)],
    'owner()': [Function (anonymous)],
    'ownerOf(uint256)': [Function (anonymous)],
    'paused()': [Function (anonymous)],
    'proxyInfo(address)': [Function (anonymous)],
    'punkContract()': [Function (anonymous)],
    'registerProxy()': [Function (anonymous)],
    'renounceOwnership()': [Function (anonymous)],
    'safeTransferFrom(address,address,uint256)': [Function (anonymous)],
    'safeTransferFrom(address,address,uint256,bytes)': [Function (anonymous)],
    'setApprovalForAll(address,bool)': [Function (anonymous)],
    'supportsInterface(bytes4)': [Function (anonymous)],
    'symbol()': [Function (anonymous)],
    'tokenByIndex(uint256)': [Function (anonymous)],
    'tokenOfOwnerByIndex(address,uint256)': [Function (anonymous)],
    'tokenURI(uint256)': [Function (anonymous)],
    'totalSupply()': [Function (anonymous)],
    'transferFrom(address,address,uint256)': [Function (anonymous)],
    'transferOwnership(address)': [Function (anonymous)],
    approve: [Function (anonymous)],
    balanceOf: [Function (anonymous)],
    burn: [Function (anonymous)],
    getApproved: [Function (anonymous)],
    isApprovedForAll: [Function (anonymous)],
    mint: [Function (anonymous)],
    name: [Function (anonymous)],
    owner: [Function (anonymous)],
    ownerOf: [Function (anonymous)],
    paused: [Function (anonymous)],
    proxyInfo: [Function (anonymous)],
    punkContract: [Function (anonymous)],
    registerProxy: [Function (anonymous)],
    renounceOwnership: [Function (anonymous)],
    setApprovalForAll: [Function (anonymous)],
    supportsInterface: [Function (anonymous)],
    symbol: [Function (anonymous)],
    tokenByIndex: [Function (anonymous)],
    tokenOfOwnerByIndex: [Function (anonymous)],
    tokenURI: [Function (anonymous)],
    totalSupply: [Function (anonymous)],
    transferFrom: [Function (anonymous)],
    transferOwnership: [Function (anonymous)],
    deployTransaction: {
      hash: '0xbfb083b762d0a04361691359e3acec07c8f67b0825347cbf39ff9a5cd903cc48',
      type: 2,
      accessList: [],
      blockHash: '0xfd4bfa51d33b4f38ff81eff0dec6d30e9742f8e48912b214e89097ee9aafa4b3',
      blockNumber: 3,
      transactionIndex: 0,
      confirmations: 1,
      from: '0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15',
      gasPrice: BigNumber { value: "1715990707" },
      maxPriorityFeePerGas: BigNumber { value: "1000000000" },
      maxFeePerGas: BigNumber { value: "2431981414" },
      gasLimit: BigNumber { value: "1992593" },
      to: null,
      value: BigNumber { value: "0" },
      nonce: 2,
      data: '0x60806040523480156200001157600080fd5b50604051620023bb380380620023bb8339810160408190526200003491620001f7565b6040518060400160405280601381526020017f577261707065642043727970746f70756e6b7300000000000000000000000000815250604051806040016040528060068152602001655750554e4b5360d01b815250620000a36200009d620000fd60201b60201c565b62000101565b8151620000b890600190602085019062000151565b508051620000ce90600290602084019062000151565b5050600b80546001600160a01b03909316610100026001600160a81b0319909316929092179091555062000264565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546200015f9062000227565b90600052602060002090601f016020900481019282620001835760008555620001ce565b82601f106200019e57805160ff1916838001178555620001ce565b82800160010185558215620001ce579182015b82811115620001ce578251825591602001919060010190620001b1565b50620001dc929150620001e0565b5090565b5b80821115620001dc5760008155600101620001e1565b60006020828403121562000209578081fd5b81516001600160a01b038116811462000220578182fd5b9392505050565b600181811c908216806200023c57607f821691505b602082108114156200025e57634e487b7160e01b600052602260045260246000fd5b50919050565b61214780620002746000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c806370a08231116100de578063a9c7b2c811610097578063ddd81f8211610071578063ddd81f8214610330578063e985e9c514610338578063f2fde38b14610374578063f97e48ee1461038757600080fd5b8063a9c7b2c8146102de578063b88d4fde1461030a578063c87b56dd1461031d57600080fd5b806370a0823114610284578063715018a6146102975780638da5cb5b1461029f57806395d89b41146102b0578063a0712d68146102b8578063a22cb465146102cb57600080fd5b80632f745c59116101305780632f745c591461021a57806342842e0e1461022d57806342966c68146102405780634f6ccce7146102535780635c975abb146102665780636352211e1461027157600080fd5b806301ffc9a71461017857806306fdde03146101a0578063081812fc146101b5578063095ea7b3146101e057806318160ddd146101f557806323b872dd14610207575b600080fd5b61018b610186366004611bce565b61039d565b60405190151581526020015b60405180910390f35b6101a86103c8565b6040516101979190611cb6565b6101c86101c3366004611c06565b61045a565b6040516001600160a01b039091168152602001610197565b6101f36101ee366004611b89565b6104f4565b005b6009545b604051908152602001610197565b6101f3610215366004611a43565b61060a565b6101f9610228366004611b89565b61063b565b6101f361023b366004611a43565b6106d1565b6101f361024e366004611c06565b6106ec565b6101f9610261366004611c06565b610818565b600b5460ff1661018b565b6101c861027f366004611c06565b6108b9565b6101f96102923660046119f7565b610930565b6101f36109b7565b6000546001600160a01b03166101c8565b6101a8610a1d565b6101f36102c6366004611c06565b610a2c565b6101f36102d9366004611b53565b610b6d565b6101c86102ec3660046119f7565b6001600160a01b039081166000908152600c60205260409020541690565b6101f3610318366004611a7e565b610b7c565b6101a861032b366004611c06565b610bb4565b6101f3610c8f565b61018b610346366004611a11565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6101f36103823660046119f7565b610da3565b600b5461010090046001600160a01b03166101c8565b60006001600160e01b0319821663780e9d6360e01b14806103c257506103c282610e6e565b92915050565b6060600180546103d790611ddb565b80601f016020809104026020016040519081016040528092919081815260200182805461040390611ddb565b80156104505780601f1061042557610100808354040283529160200191610450565b820191906000526020600020905b81548152906001019060200180831161043357829003601f168201915b5050505050905090565b6000818152600360205260408120546001600160a01b03166104d85760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b60006104ff826108b9565b9050806001600160a01b0316836001600160a01b0316141561056d5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016104cf565b336001600160a01b038216148061058957506105898133610346565b6105fb5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016104cf565b6106058383610ebe565b505050565b6106143382610f2c565b6106305760405162461bcd60e51b81526004016104cf90611d1b565b610605838383611023565b600061064683610930565b82106106a85760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016104cf565b506001600160a01b03919091166000908152600760209081526040808320938352929052205490565b61060583838360405180602001604052806000815250610b7c565b600b5460ff16156107325760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104cf565b3361073d8183610f2c565b61079f5760405162461bcd60e51b815260206004820152602d60248201527f50756e6b577261707065723a2063616c6c6572206973206e6f74206f776e657260448201526c081b9bdc88185c1c1c9bdd9959609a1b60648201526084016104cf565b6107a8826111ce565b600b546040516322dca8bb60e21b81526001600160a01b0383811660048301526024820185905261010090920490911690638b72a2ec90604401600060405180830381600087803b1580156107fc57600080fd5b505af1158015610810573d6000803e3d6000fd5b505050505050565b600061082360095490565b82106108865760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016104cf565b600982815481106108a757634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6000818152600360205260408120546001600160a01b0316806103c25760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016104cf565b60006001600160a01b03821661099b5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016104cf565b506001600160a01b031660009081526004602052604090205490565b6000546001600160a01b03163314610a115760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104cf565b610a1b6000611275565b565b6060600280546103d790611ddb565b600b5460ff1615610a725760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104cf565b6000336001600160a01b038181166000908152600c60205260409081902054600b54915163a9059cbb60e01b81526101009092048316600483015260248201869052929350911690819063a9059cbb90604401602060405180830381600087803b158015610adf57600080fd5b505af1158015610af3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b179190611bb2565b610b635760405162461bcd60e51b815260206004820152601a60248201527f50756e6b577261707065723a207472616e73666572206661696c00000000000060448201526064016104cf565b61060582846112c5565b610b78338383611413565b5050565b610b863383610f2c565b610ba25760405162461bcd60e51b81526004016104cf90611d1b565b610bae848484846114e2565b50505050565b6000818152600360205260409020546060906001600160a01b0316610c335760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016104cf565b6000610c3d611515565b90506000815111610c5d5760405180602001604052806000815250610c88565b80610c6784611535565b604051602001610c78929190611c4a565b6040516020818303038152906040525b9392505050565b336000818152600c60205260409020546001600160a01b031615610d0a5760405162461bcd60e51b815260206004820152602c60248201527f50756e6b577261707065723a2063616c6c65722068617320726567697374657260448201526b6564207468652070726f787960a01b60648201526084016104cf565b6000604051610d18906119ce565b604051809103906000f080158015610d34573d6000803e3d6000fd5b506001600160a01b038381166000818152600c602090815260409182902080546001600160a01b031916948616948517905581519283528201929092529192507f3623f8bd4da9524cfaa08c81b8194f759ca625e8d761f4cc2cea23e63d3f4b12910160405180910390a15050565b6000546001600160a01b03163314610dfd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104cf565b6001600160a01b038116610e625760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104cf565b610e6b81611275565b50565b60006001600160e01b031982166380ac58cd60e01b1480610e9f57506001600160e01b03198216635b5e139f60e01b145b806103c257506301ffc9a760e01b6001600160e01b03198316146103c2565b600081815260056020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610ef3826108b9565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600360205260408120546001600160a01b0316610fa55760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016104cf565b6000610fb0836108b9565b9050806001600160a01b0316846001600160a01b03161480610feb5750836001600160a01b0316610fe08461045a565b6001600160a01b0316145b8061101b57506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611036826108b9565b6001600160a01b03161461109e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016104cf565b6001600160a01b0382166111005760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104cf565b61110b83838361164f565b61111660008261'... 8360 more characters,
      r: '0x6bd5722235d37ac1ca93d6eb6aa71b7edf2f7cfb8cd50d6783669f730232c502',
      s: '0x124dc15943315ee7b2878e5477aa0bfba498aab52d8b310fd1f02a5b474e8a40',
      v: 0,
      creates: '0x025FE4760c6f14dE878C22cEb09A3235F16dAe53',
      chainId: 31337,
      wait: [Function (anonymous)]
    }
  },
  BAYC: Contract {
    interface: Interface {
      fragments: [Array],
      _abiCoder: [AbiCoder],
      functions: [Object],
      errors: {},
      events: [Object],
      structs: {},
      deploy: [ConstructorFragment],
      _isInterface: true
    },
    provider: EthersProviderWrapper {
      _isProvider: true,
      _events: [],
      _emitted: [Object],
      disableCcipRead: false,
      formatter: [Formatter],
      anyNetwork: false,
      _networkPromise: [Promise],
      _maxInternalBlockNumber: 0,
      _lastBlockNumber: -2,
      _maxFilterBlockRange: 10,
      _pollingInterval: 4000,
      _fastQueryDate: 1678183301090,
      connection: [Object],
      _nextId: 42,
      _hardhatProvider: [BackwardsCompatibilityProviderAdapter],
      _eventLoopCache: [Object],
      _network: [Object],
      _internalBlockNumber: [Promise],
      _fastBlockNumber: 0,
      _fastBlockNumberPromise: [Promise]
    },
    signer: SignerWithAddress {
      _isSigner: true,
      address: '0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15',
      _signer: [JsonRpcSigner],
      provider: [EthersProviderWrapper]
    },
    callStatic: {
      'approve(address,uint256)': [Function (anonymous)],
      'balanceOf(address)': [Function (anonymous)],
      'baseURI()': [Function (anonymous)],
      'getApproved(uint256)': [Function (anonymous)],
      'isApprovedForAll(address,address)': [Function (anonymous)],
      'mint(uint256)': [Function (anonymous)],
      'mintCounts(address)': [Function (anonymous)],
      'name()': [Function (anonymous)],
      'ownerOf(uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256,bytes)': [Function (anonymous)],
      'setApprovalForAll(address,bool)': [Function (anonymous)],
      'setBaseURI(string)': [Function (anonymous)],
      'supportsInterface(bytes4)': [Function (anonymous)],
      'symbol()': [Function (anonymous)],
      'tokenByIndex(uint256)': [Function (anonymous)],
      'tokenOfOwnerByIndex(address,uint256)': [Function (anonymous)],
      'tokenURI(uint256)': [Function (anonymous)],
      'totalSupply()': [Function (anonymous)],
      'transferFrom(address,address,uint256)': [Function (anonymous)],
      approve: [Function (anonymous)],
      balanceOf: [Function (anonymous)],
      baseURI: [Function (anonymous)],
      getApproved: [Function (anonymous)],
      isApprovedForAll: [Function (anonymous)],
      mint: [Function (anonymous)],
      mintCounts: [Function (anonymous)],
      name: [Function (anonymous)],
      ownerOf: [Function (anonymous)],
      setApprovalForAll: [Function (anonymous)],
      setBaseURI: [Function (anonymous)],
      supportsInterface: [Function (anonymous)],
      symbol: [Function (anonymous)],
      tokenByIndex: [Function (anonymous)],
      tokenOfOwnerByIndex: [Function (anonymous)],
      tokenURI: [Function (anonymous)],
      totalSupply: [Function (anonymous)],
      transferFrom: [Function (anonymous)]
    },
    estimateGas: {
      'approve(address,uint256)': [Function (anonymous)],
      'balanceOf(address)': [Function (anonymous)],
      'baseURI()': [Function (anonymous)],
      'getApproved(uint256)': [Function (anonymous)],
      'isApprovedForAll(address,address)': [Function (anonymous)],
      'mint(uint256)': [Function (anonymous)],
      'mintCounts(address)': [Function (anonymous)],
      'name()': [Function (anonymous)],
      'ownerOf(uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256,bytes)': [Function (anonymous)],
      'setApprovalForAll(address,bool)': [Function (anonymous)],
      'setBaseURI(string)': [Function (anonymous)],
      'supportsInterface(bytes4)': [Function (anonymous)],
      'symbol()': [Function (anonymous)],
      'tokenByIndex(uint256)': [Function (anonymous)],
      'tokenOfOwnerByIndex(address,uint256)': [Function (anonymous)],
      'tokenURI(uint256)': [Function (anonymous)],
      'totalSupply()': [Function (anonymous)],
      'transferFrom(address,address,uint256)': [Function (anonymous)],
      approve: [Function (anonymous)],
      balanceOf: [Function (anonymous)],
      baseURI: [Function (anonymous)],
      getApproved: [Function (anonymous)],
      isApprovedForAll: [Function (anonymous)],
      mint: [Function (anonymous)],
      mintCounts: [Function (anonymous)],
      name: [Function (anonymous)],
      ownerOf: [Function (anonymous)],
      setApprovalForAll: [Function (anonymous)],
      setBaseURI: [Function (anonymous)],
      supportsInterface: [Function (anonymous)],
      symbol: [Function (anonymous)],
      tokenByIndex: [Function (anonymous)],
      tokenOfOwnerByIndex: [Function (anonymous)],
      tokenURI: [Function (anonymous)],
      totalSupply: [Function (anonymous)],
      transferFrom: [Function (anonymous)]
    },
    functions: {
      'approve(address,uint256)': [Function (anonymous)],
      'balanceOf(address)': [Function (anonymous)],
      'baseURI()': [Function (anonymous)],
      'getApproved(uint256)': [Function (anonymous)],
      'isApprovedForAll(address,address)': [Function (anonymous)],
      'mint(uint256)': [Function (anonymous)],
      'mintCounts(address)': [Function (anonymous)],
      'name()': [Function (anonymous)],
      'ownerOf(uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256,bytes)': [Function (anonymous)],
      'setApprovalForAll(address,bool)': [Function (anonymous)],
      'setBaseURI(string)': [Function (anonymous)],
      'supportsInterface(bytes4)': [Function (anonymous)],
      'symbol()': [Function (anonymous)],
      'tokenByIndex(uint256)': [Function (anonymous)],
      'tokenOfOwnerByIndex(address,uint256)': [Function (anonymous)],
      'tokenURI(uint256)': [Function (anonymous)],
      'totalSupply()': [Function (anonymous)],
      'transferFrom(address,address,uint256)': [Function (anonymous)],
      approve: [Function (anonymous)],
      balanceOf: [Function (anonymous)],
      baseURI: [Function (anonymous)],
      getApproved: [Function (anonymous)],
      isApprovedForAll: [Function (anonymous)],
      mint: [Function (anonymous)],
      mintCounts: [Function (anonymous)],
      name: [Function (anonymous)],
      ownerOf: [Function (anonymous)],
      setApprovalForAll: [Function (anonymous)],
      setBaseURI: [Function (anonymous)],
      supportsInterface: [Function (anonymous)],
      symbol: [Function (anonymous)],
      tokenByIndex: [Function (anonymous)],
      tokenOfOwnerByIndex: [Function (anonymous)],
      tokenURI: [Function (anonymous)],
      totalSupply: [Function (anonymous)],
      transferFrom: [Function (anonymous)]
    },
    populateTransaction: {
      'approve(address,uint256)': [Function (anonymous)],
      'balanceOf(address)': [Function (anonymous)],
      'baseURI()': [Function (anonymous)],
      'getApproved(uint256)': [Function (anonymous)],
      'isApprovedForAll(address,address)': [Function (anonymous)],
      'mint(uint256)': [Function (anonymous)],
      'mintCounts(address)': [Function (anonymous)],
      'name()': [Function (anonymous)],
      'ownerOf(uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256,bytes)': [Function (anonymous)],
      'setApprovalForAll(address,bool)': [Function (anonymous)],
      'setBaseURI(string)': [Function (anonymous)],
      'supportsInterface(bytes4)': [Function (anonymous)],
      'symbol()': [Function (anonymous)],
      'tokenByIndex(uint256)': [Function (anonymous)],
      'tokenOfOwnerByIndex(address,uint256)': [Function (anonymous)],
      'tokenURI(uint256)': [Function (anonymous)],
      'totalSupply()': [Function (anonymous)],
      'transferFrom(address,address,uint256)': [Function (anonymous)],
      approve: [Function (anonymous)],
      balanceOf: [Function (anonymous)],
      baseURI: [Function (anonymous)],
      getApproved: [Function (anonymous)],
      isApprovedForAll: [Function (anonymous)],
      mint: [Function (anonymous)],
      mintCounts: [Function (anonymous)],
      name: [Function (anonymous)],
      ownerOf: [Function (anonymous)],
      setApprovalForAll: [Function (anonymous)],
      setBaseURI: [Function (anonymous)],
      supportsInterface: [Function (anonymous)],
      symbol: [Function (anonymous)],
      tokenByIndex: [Function (anonymous)],
      tokenOfOwnerByIndex: [Function (anonymous)],
      tokenURI: [Function (anonymous)],
      totalSupply: [Function (anonymous)],
      transferFrom: [Function (anonymous)]
    },
    filters: {
      'Approval(address,address,uint256)': [Function (anonymous)],
      'ApprovalForAll(address,address,bool)': [Function (anonymous)],
      'Transfer(address,address,uint256)': [Function (anonymous)],
      Approval: [Function (anonymous)],
      ApprovalForAll: [Function (anonymous)],
      Transfer: [Function (anonymous)]
    },
    _runningEvents: {},
    _wrappedEmits: {},
    address: '0xb2f97A3c2E48cd368901657e31Faaa93035CE390',
    resolvedAddress: Promise { '0xb2f97A3c2E48cd368901657e31Faaa93035CE390' },
    'approve(address,uint256)': [Function (anonymous)],
    'balanceOf(address)': [Function (anonymous)],
    'baseURI()': [Function (anonymous)],
    'getApproved(uint256)': [Function (anonymous)],
    'isApprovedForAll(address,address)': [Function (anonymous)],
    'mint(uint256)': [Function (anonymous)],
    'mintCounts(address)': [Function (anonymous)],
    'name()': [Function (anonymous)],
    'ownerOf(uint256)': [Function (anonymous)],
    'safeTransferFrom(address,address,uint256)': [Function (anonymous)],
    'safeTransferFrom(address,address,uint256,bytes)': [Function (anonymous)],
    'setApprovalForAll(address,bool)': [Function (anonymous)],
    'setBaseURI(string)': [Function (anonymous)],
    'supportsInterface(bytes4)': [Function (anonymous)],
    'symbol()': [Function (anonymous)],
    'tokenByIndex(uint256)': [Function (anonymous)],
    'tokenOfOwnerByIndex(address,uint256)': [Function (anonymous)],
    'tokenURI(uint256)': [Function (anonymous)],
    'totalSupply()': [Function (anonymous)],
    'transferFrom(address,address,uint256)': [Function (anonymous)],
    approve: [Function (anonymous)],
    balanceOf: [Function (anonymous)],
    baseURI: [Function (anonymous)],
    getApproved: [Function (anonymous)],
    isApprovedForAll: [Function (anonymous)],
    mint: [Function (anonymous)],
    mintCounts: [Function (anonymous)],
    name: [Function (anonymous)],
    ownerOf: [Function (anonymous)],
    setApprovalForAll: [Function (anonymous)],
    setBaseURI: [Function (anonymous)],
    supportsInterface: [Function (anonymous)],
    symbol: [Function (anonymous)],
    tokenByIndex: [Function (anonymous)],
    tokenOfOwnerByIndex: [Function (anonymous)],
    tokenURI: [Function (anonymous)],
    totalSupply: [Function (anonymous)],
    transferFrom: [Function (anonymous)],
    deployTransaction: {
      hash: '0x139a19596f4579bfba7695e7636f7ff12176387ef4cb1be180a4a7df1ca13dad',
      type: 2,
      accessList: [],
      blockHash: '0xcf3b1ef1f63092685e65ce55b92d31ac60d035a05a2bd05bd5f1cf3fee191da6',
      blockNumber: 4,
      transactionIndex: 0,
      confirmations: 1,
      from: '0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15',
      gasPrice: BigNumber { value: "1655140023" },
      maxPriorityFeePerGas: BigNumber { value: "1000000000" },
      maxFeePerGas: BigNumber { value: "2310280046" },
      gasLimit: BigNumber { value: "1641210" },
      to: null,
      value: BigNumber { value: "0" },
      nonce: 3,
      data: '0x60806040523480156200001157600080fd5b5060405162001dc938038062001dc9833981016040819052620000349162000221565b8151829082906200004d906000906020850190620000c8565b50805162000063906001906020840190620000c8565b50506040805180820190915260178082527f68747470733a2f2f4d696e7461626c654552433732312f0000000000000000006020909201918252620000ad9250600a9190620000c8565b5050600b80546001600160a01b0319163317905550620002db565b828054620000d69062000288565b90600052602060002090601f016020900481019282620000fa576000855562000145565b82601f106200011557805160ff191683800117855562000145565b8280016001018555821562000145579182015b828111156200014557825182559160200191906001019062000128565b506200015392915062000157565b5090565b5b8082111562000153576000815560010162000158565b600082601f8301126200017f578081fd5b81516001600160401b03808211156200019c576200019c620002c5565b604051601f8301601f19908116603f01168101908282118183101715620001c757620001c7620002c5565b81604052838152602092508683858801011115620001e3578485fd5b8491505b83821015620002065785820183015181830184015290820190620001e7565b838211156200021757848385830101525b9695505050505050565b6000806040838503121562000234578182fd5b82516001600160401b03808211156200024b578384fd5b62000259868387016200016e565b935060208501519150808211156200026f578283fd5b506200027e858286016200016e565b9150509250929050565b600181811c908216806200029d57607f821691505b60208210811415620002bf57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b611ade80620002eb6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806355f804b3116100ad578063a0712d6811610071578063a0712d6814610275578063a22cb46514610288578063b88d4fde1461029b578063c87b56dd146102ae578063e985e9c5146102c157600080fd5b806355f804b31461022c5780636352211e1461023f5780636c0360eb1461025257806370a082311461025a57806395d89b411461026d57600080fd5b806323b872dd116100f457806323b872dd146101c05780632f745c59146101d357806342842e0e146101e65780634f6ccce7146101f9578063532778791461020c57600080fd5b806301ffc9a71461013157806306fdde0314610159578063081812fc1461016e578063095ea7b31461019957806318160ddd146101ae575b600080fd5b61014461013f366004611790565b6102fd565b60405190151581526020015b60405180910390f35b610161610328565b60405161015091906118be565b61018161017c36600461180e565b6103ba565b6040516001600160a01b039091168152602001610150565b6101ac6101a7366004611767565b610454565b005b6008545b604051908152602001610150565b6101ac6101ce366004611679565b61056a565b6101b26101e1366004611767565b61059b565b6101ac6101f4366004611679565b610631565b6101b261020736600461180e565b61064c565b6101b261021a36600461162d565b600c6020526000908152604090205481565b6101ac61023a3660046117c8565b6106ed565b61018161024d36600461180e565b610704565b61016161077b565b6101b261026836600461162d565b610809565b610161610890565b61014461028336600461180e565b61089f565b6101ac61029636600461172d565b61098c565b6101ac6102a93660046116b4565b610997565b6101616102bc36600461180e565b6109cf565b6101446102cf366004611647565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b0319821663780e9d6360e01b1480610322575061032282610aaa565b92915050565b606060008054610337906119e3565b80601f0160208091040260200160405190810160405280929190818152602001828054610363906119e3565b80156103b05780601f10610385576101008083540402835291602001916103b0565b820191906000526020600020905b81548152906001019060200180831161039357829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166104385760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061045f82610704565b9050806001600160a01b0316836001600160a01b031614156104cd5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161042f565b336001600160a01b03821614806104e957506104e981336102cf565b61055b5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161042f565b6105658383610afa565b505050565b6105743382610b68565b6105905760405162461bcd60e51b815260040161042f90611923565b610565838383610c5f565b60006105a683610809565b82106106085760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161042f565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61056583838360405180602001604052806000815250610997565b600061065760085490565b82106106ba5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161042f565b600882815481106106db57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b805161070090600a906020840190611502565b5050565b6000818152600260205260408120546001600160a01b0316806103225760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161042f565b600a8054610788906119e3565b80601f01602080910402602001604051908101604052809291908181526020018280546107b4906119e3565b80156108015780601f106107d657610100808354040283529160200191610801565b820191906000526020600020905b8154815290600101906020018083116107e457829003601f168201915b505050505081565b60006001600160a01b0382166108745760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161042f565b506001600160a01b031660009081526003602052604090205490565b606060018054610337906119e3565b600061271082106108e65760405162461bcd60e51b8152602060048201526011602482015270195e18d95959081b5a5b9d081b1a5b5a5d607a1b604482015260640161042f565b336000908152600c60205260408120805460019290610906908490611974565b9091555050600b546001600160a01b0316336001600160a01b03161461097a57336000908152600c60205260409020546014101561097a5760405162461bcd60e51b8152602060048201526011602482015270195e18d95959081b5a5b9d081b1a5b5a5d607a1b604482015260640161042f565b6109843383610e0a565b506001919050565b610700338383610f58565b6109a13383610b68565b6109bd5760405162461bcd60e51b815260040161042f90611923565b6109c984848484611027565b50505050565b6000818152600260205260409020546060906001600160a01b0316610a4e5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161042f565b6000610a5861105a565b90506000815111610a785760405180602001604052806000815250610aa3565b80610a8284611069565b604051602001610a93929190611852565b6040516020818303038152906040525b9392505050565b60006001600160e01b031982166380ac58cd60e01b1480610adb57506001600160e01b03198216635b5e139f60e01b145b8061032257506301ffc9a760e01b6001600160e01b0319831614610322565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610b2f82610704565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316610be15760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161042f565b6000610bec83610704565b9050806001600160a01b0316846001600160a01b03161480610c275750836001600160a01b0316610c1c846103ba565b6001600160a01b0316145b80610c5757506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316610c7282610704565b6001600160a01b031614610cda5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161042f565b6001600160a01b038216610d3c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161042f565b610d47838383611183565b610d52600082610afa565b6001600160a01b0383166000908152600360205260408120805460019290610d7b9084906119a0565b90915550506001600160a01b0382166000908152600360205260408120805460019290610da9908490611974565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216610e605760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161042f565b6000818152600260205260409020546001600160a01b031615610ec55760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161042f565b610ed160008383611183565b6001600160a01b0382166000908152600360205260408120805460019290610efa908490611974565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b816001600160a01b0316836001600160a01b03161415610fba5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161042f565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611032848484610c5f565b61103e8484848461123b565b6109c95760405162461bcd60e51b815260040161042f906118d1565b6060600a8054610337906119e3565b60608161108d5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156110b757806110a1'... 5636 more characters,
      r: '0xbfa2c11d5729a4a90e2466097d922f799f6665a62e657df384d77053002d17b1',
      s: '0x67cb2daa7821a23779100ffd37844c7f76e5f5322d6c9d997c459e621dd746cb',
      v: 0,
      creates: '0xb2f97A3c2E48cd368901657e31Faaa93035CE390',
      chainId: 31337,
      wait: [Function (anonymous)]
    }
  },
  DOODLE: Contract {
    interface: Interface {
      fragments: [Array],
      _abiCoder: [AbiCoder],
      functions: [Object],
      errors: {},
      events: [Object],
      structs: {},
      deploy: [ConstructorFragment],
      _isInterface: true
    },
    provider: EthersProviderWrapper {
      _isProvider: true,
      _events: [],
      _emitted: [Object],
      disableCcipRead: false,
      formatter: [Formatter],
      anyNetwork: false,
      _networkPromise: [Promise],
      _maxInternalBlockNumber: 0,
      _lastBlockNumber: -2,
      _maxFilterBlockRange: 10,
      _pollingInterval: 4000,
      _fastQueryDate: 1678183301090,
      connection: [Object],
      _nextId: 42,
      _hardhatProvider: [BackwardsCompatibilityProviderAdapter],
      _eventLoopCache: [Object],
      _network: [Object],
      _internalBlockNumber: [Promise],
      _fastBlockNumber: 0,
      _fastBlockNumberPromise: [Promise]
    },
    signer: SignerWithAddress {
      _isSigner: true,
      address: '0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15',
      _signer: [JsonRpcSigner],
      provider: [EthersProviderWrapper]
    },
    callStatic: {
      'approve(address,uint256)': [Function (anonymous)],
      'balanceOf(address)': [Function (anonymous)],
      'baseURI()': [Function (anonymous)],
      'getApproved(uint256)': [Function (anonymous)],
      'isApprovedForAll(address,address)': [Function (anonymous)],
      'mint(uint256)': [Function (anonymous)],
      'mintCounts(address)': [Function (anonymous)],
      'name()': [Function (anonymous)],
      'ownerOf(uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256,bytes)': [Function (anonymous)],
      'setApprovalForAll(address,bool)': [Function (anonymous)],
      'setBaseURI(string)': [Function (anonymous)],
      'supportsInterface(bytes4)': [Function (anonymous)],
      'symbol()': [Function (anonymous)],
      'tokenByIndex(uint256)': [Function (anonymous)],
      'tokenOfOwnerByIndex(address,uint256)': [Function (anonymous)],
      'tokenURI(uint256)': [Function (anonymous)],
      'totalSupply()': [Function (anonymous)],
      'transferFrom(address,address,uint256)': [Function (anonymous)],
      approve: [Function (anonymous)],
      balanceOf: [Function (anonymous)],
      baseURI: [Function (anonymous)],
      getApproved: [Function (anonymous)],
      isApprovedForAll: [Function (anonymous)],
      mint: [Function (anonymous)],
      mintCounts: [Function (anonymous)],
      name: [Function (anonymous)],
      ownerOf: [Function (anonymous)],
      setApprovalForAll: [Function (anonymous)],
      setBaseURI: [Function (anonymous)],
      supportsInterface: [Function (anonymous)],
      symbol: [Function (anonymous)],
      tokenByIndex: [Function (anonymous)],
      tokenOfOwnerByIndex: [Function (anonymous)],
      tokenURI: [Function (anonymous)],
      totalSupply: [Function (anonymous)],
      transferFrom: [Function (anonymous)]
    },
    estimateGas: {
      'approve(address,uint256)': [Function (anonymous)],
      'balanceOf(address)': [Function (anonymous)],
      'baseURI()': [Function (anonymous)],
      'getApproved(uint256)': [Function (anonymous)],
      'isApprovedForAll(address,address)': [Function (anonymous)],
      'mint(uint256)': [Function (anonymous)],
      'mintCounts(address)': [Function (anonymous)],
      'name()': [Function (anonymous)],
      'ownerOf(uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256,bytes)': [Function (anonymous)],
      'setApprovalForAll(address,bool)': [Function (anonymous)],
      'setBaseURI(string)': [Function (anonymous)],
      'supportsInterface(bytes4)': [Function (anonymous)],
      'symbol()': [Function (anonymous)],
      'tokenByIndex(uint256)': [Function (anonymous)],
      'tokenOfOwnerByIndex(address,uint256)': [Function (anonymous)],
      'tokenURI(uint256)': [Function (anonymous)],
      'totalSupply()': [Function (anonymous)],
      'transferFrom(address,address,uint256)': [Function (anonymous)],
      approve: [Function (anonymous)],
      balanceOf: [Function (anonymous)],
      baseURI: [Function (anonymous)],
      getApproved: [Function (anonymous)],
      isApprovedForAll: [Function (anonymous)],
      mint: [Function (anonymous)],
      mintCounts: [Function (anonymous)],
      name: [Function (anonymous)],
      ownerOf: [Function (anonymous)],
      setApprovalForAll: [Function (anonymous)],
      setBaseURI: [Function (anonymous)],
      supportsInterface: [Function (anonymous)],
      symbol: [Function (anonymous)],
      tokenByIndex: [Function (anonymous)],
      tokenOfOwnerByIndex: [Function (anonymous)],
      tokenURI: [Function (anonymous)],
      totalSupply: [Function (anonymous)],
      transferFrom: [Function (anonymous)]
    },
    functions: {
      'approve(address,uint256)': [Function (anonymous)],
      'balanceOf(address)': [Function (anonymous)],
      'baseURI()': [Function (anonymous)],
      'getApproved(uint256)': [Function (anonymous)],
      'isApprovedForAll(address,address)': [Function (anonymous)],
      'mint(uint256)': [Function (anonymous)],
      'mintCounts(address)': [Function (anonymous)],
      'name()': [Function (anonymous)],
      'ownerOf(uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256,bytes)': [Function (anonymous)],
      'setApprovalForAll(address,bool)': [Function (anonymous)],
      'setBaseURI(string)': [Function (anonymous)],
      'supportsInterface(bytes4)': [Function (anonymous)],
      'symbol()': [Function (anonymous)],
      'tokenByIndex(uint256)': [Function (anonymous)],
      'tokenOfOwnerByIndex(address,uint256)': [Function (anonymous)],
      'tokenURI(uint256)': [Function (anonymous)],
      'totalSupply()': [Function (anonymous)],
      'transferFrom(address,address,uint256)': [Function (anonymous)],
      approve: [Function (anonymous)],
      balanceOf: [Function (anonymous)],
      baseURI: [Function (anonymous)],
      getApproved: [Function (anonymous)],
      isApprovedForAll: [Function (anonymous)],
      mint: [Function (anonymous)],
      mintCounts: [Function (anonymous)],
      name: [Function (anonymous)],
      ownerOf: [Function (anonymous)],
      setApprovalForAll: [Function (anonymous)],
      setBaseURI: [Function (anonymous)],
      supportsInterface: [Function (anonymous)],
      symbol: [Function (anonymous)],
      tokenByIndex: [Function (anonymous)],
      tokenOfOwnerByIndex: [Function (anonymous)],
      tokenURI: [Function (anonymous)],
      totalSupply: [Function (anonymous)],
      transferFrom: [Function (anonymous)]
    },
    populateTransaction: {
      'approve(address,uint256)': [Function (anonymous)],
      'balanceOf(address)': [Function (anonymous)],
      'baseURI()': [Function (anonymous)],
      'getApproved(uint256)': [Function (anonymous)],
      'isApprovedForAll(address,address)': [Function (anonymous)],
      'mint(uint256)': [Function (anonymous)],
      'mintCounts(address)': [Function (anonymous)],
      'name()': [Function (anonymous)],
      'ownerOf(uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256,bytes)': [Function (anonymous)],
      'setApprovalForAll(address,bool)': [Function (anonymous)],
      'setBaseURI(string)': [Function (anonymous)],
      'supportsInterface(bytes4)': [Function (anonymous)],
      'symbol()': [Function (anonymous)],
      'tokenByIndex(uint256)': [Function (anonymous)],
      'tokenOfOwnerByIndex(address,uint256)': [Function (anonymous)],
      'tokenURI(uint256)': [Function (anonymous)],
      'totalSupply()': [Function (anonymous)],
      'transferFrom(address,address,uint256)': [Function (anonymous)],
      approve: [Function (anonymous)],
      balanceOf: [Function (anonymous)],
      baseURI: [Function (anonymous)],
      getApproved: [Function (anonymous)],
      isApprovedForAll: [Function (anonymous)],
      mint: [Function (anonymous)],
      mintCounts: [Function (anonymous)],
      name: [Function (anonymous)],
      ownerOf: [Function (anonymous)],
      setApprovalForAll: [Function (anonymous)],
      setBaseURI: [Function (anonymous)],
      supportsInterface: [Function (anonymous)],
      symbol: [Function (anonymous)],
      tokenByIndex: [Function (anonymous)],
      tokenOfOwnerByIndex: [Function (anonymous)],
      tokenURI: [Function (anonymous)],
      totalSupply: [Function (anonymous)],
      transferFrom: [Function (anonymous)]
    },
    filters: {
      'Approval(address,address,uint256)': [Function (anonymous)],
      'ApprovalForAll(address,address,bool)': [Function (anonymous)],
      'Transfer(address,address,uint256)': [Function (anonymous)],
      Approval: [Function (anonymous)],
      ApprovalForAll: [Function (anonymous)],
      Transfer: [Function (anonymous)]
    },
    _runningEvents: {},
    _wrappedEmits: {},
    address: '0x5a60c5d89A0A0e08ae0CAe73453e3AcC9C335847',
    resolvedAddress: Promise { '0x5a60c5d89A0A0e08ae0CAe73453e3AcC9C335847' },
    'approve(address,uint256)': [Function (anonymous)],
    'balanceOf(address)': [Function (anonymous)],
    'baseURI()': [Function (anonymous)],
    'getApproved(uint256)': [Function (anonymous)],
    'isApprovedForAll(address,address)': [Function (anonymous)],
    'mint(uint256)': [Function (anonymous)],
    'mintCounts(address)': [Function (anonymous)],
    'name()': [Function (anonymous)],
    'ownerOf(uint256)': [Function (anonymous)],
    'safeTransferFrom(address,address,uint256)': [Function (anonymous)],
    'safeTransferFrom(address,address,uint256,bytes)': [Function (anonymous)],
    'setApprovalForAll(address,bool)': [Function (anonymous)],
    'setBaseURI(string)': [Function (anonymous)],
    'supportsInterface(bytes4)': [Function (anonymous)],
    'symbol()': [Function (anonymous)],
    'tokenByIndex(uint256)': [Function (anonymous)],
    'tokenOfOwnerByIndex(address,uint256)': [Function (anonymous)],
    'tokenURI(uint256)': [Function (anonymous)],
    'totalSupply()': [Function (anonymous)],
    'transferFrom(address,address,uint256)': [Function (anonymous)],
    approve: [Function (anonymous)],
    balanceOf: [Function (anonymous)],
    baseURI: [Function (anonymous)],
    getApproved: [Function (anonymous)],
    isApprovedForAll: [Function (anonymous)],
    mint: [Function (anonymous)],
    mintCounts: [Function (anonymous)],
    name: [Function (anonymous)],
    ownerOf: [Function (anonymous)],
    setApprovalForAll: [Function (anonymous)],
    setBaseURI: [Function (anonymous)],
    supportsInterface: [Function (anonymous)],
    symbol: [Function (anonymous)],
    tokenByIndex: [Function (anonymous)],
    tokenOfOwnerByIndex: [Function (anonymous)],
    tokenURI: [Function (anonymous)],
    totalSupply: [Function (anonymous)],
    transferFrom: [Function (anonymous)],
    deployTransaction: {
      hash: '0x4663e6f53da0d4a05e9976fe1b759e535ea4f7add00d2451f0ee1355887af6a3',
      type: 2,
      accessList: [],
      blockHash: '0x71071e4df4272da38cbbbb06e3d7b00d440a1571fcc554e7094c999a14754b8c',
      blockNumber: 5,
      transactionIndex: 0,
      confirmations: 1,
      from: '0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15',
      gasPrice: BigNumber { value: "1594838331" },
      maxPriorityFeePerGas: BigNumber { value: "1000000000" },
      maxFeePerGas: BigNumber { value: "2189676662" },
      gasLimit: BigNumber { value: "1641258" },
      to: null,
      value: BigNumber { value: "0" },
      nonce: 4,
      data: '0x60806040523480156200001157600080fd5b5060405162001dc938038062001dc9833981016040819052620000349162000221565b8151829082906200004d906000906020850190620000c8565b50805162000063906001906020840190620000c8565b50506040805180820190915260178082527f68747470733a2f2f4d696e7461626c654552433732312f0000000000000000006020909201918252620000ad9250600a9190620000c8565b5050600b80546001600160a01b0319163317905550620002db565b828054620000d69062000288565b90600052602060002090601f016020900481019282620000fa576000855562000145565b82601f106200011557805160ff191683800117855562000145565b8280016001018555821562000145579182015b828111156200014557825182559160200191906001019062000128565b506200015392915062000157565b5090565b5b8082111562000153576000815560010162000158565b600082601f8301126200017f578081fd5b81516001600160401b03808211156200019c576200019c620002c5565b604051601f8301601f19908116603f01168101908282118183101715620001c757620001c7620002c5565b81604052838152602092508683858801011115620001e3578485fd5b8491505b83821015620002065785820183015181830184015290820190620001e7565b838211156200021757848385830101525b9695505050505050565b6000806040838503121562000234578182fd5b82516001600160401b03808211156200024b578384fd5b62000259868387016200016e565b935060208501519150808211156200026f578283fd5b506200027e858286016200016e565b9150509250929050565b600181811c908216806200029d57607f821691505b60208210811415620002bf57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b611ade80620002eb6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806355f804b3116100ad578063a0712d6811610071578063a0712d6814610275578063a22cb46514610288578063b88d4fde1461029b578063c87b56dd146102ae578063e985e9c5146102c157600080fd5b806355f804b31461022c5780636352211e1461023f5780636c0360eb1461025257806370a082311461025a57806395d89b411461026d57600080fd5b806323b872dd116100f457806323b872dd146101c05780632f745c59146101d357806342842e0e146101e65780634f6ccce7146101f9578063532778791461020c57600080fd5b806301ffc9a71461013157806306fdde0314610159578063081812fc1461016e578063095ea7b31461019957806318160ddd146101ae575b600080fd5b61014461013f366004611790565b6102fd565b60405190151581526020015b60405180910390f35b610161610328565b60405161015091906118be565b61018161017c36600461180e565b6103ba565b6040516001600160a01b039091168152602001610150565b6101ac6101a7366004611767565b610454565b005b6008545b604051908152602001610150565b6101ac6101ce366004611679565b61056a565b6101b26101e1366004611767565b61059b565b6101ac6101f4366004611679565b610631565b6101b261020736600461180e565b61064c565b6101b261021a36600461162d565b600c6020526000908152604090205481565b6101ac61023a3660046117c8565b6106ed565b61018161024d36600461180e565b610704565b61016161077b565b6101b261026836600461162d565b610809565b610161610890565b61014461028336600461180e565b61089f565b6101ac61029636600461172d565b61098c565b6101ac6102a93660046116b4565b610997565b6101616102bc36600461180e565b6109cf565b6101446102cf366004611647565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b0319821663780e9d6360e01b1480610322575061032282610aaa565b92915050565b606060008054610337906119e3565b80601f0160208091040260200160405190810160405280929190818152602001828054610363906119e3565b80156103b05780601f10610385576101008083540402835291602001916103b0565b820191906000526020600020905b81548152906001019060200180831161039357829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166104385760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061045f82610704565b9050806001600160a01b0316836001600160a01b031614156104cd5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161042f565b336001600160a01b03821614806104e957506104e981336102cf565b61055b5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161042f565b6105658383610afa565b505050565b6105743382610b68565b6105905760405162461bcd60e51b815260040161042f90611923565b610565838383610c5f565b60006105a683610809565b82106106085760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161042f565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61056583838360405180602001604052806000815250610997565b600061065760085490565b82106106ba5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161042f565b600882815481106106db57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b805161070090600a906020840190611502565b5050565b6000818152600260205260408120546001600160a01b0316806103225760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161042f565b600a8054610788906119e3565b80601f01602080910402602001604051908101604052809291908181526020018280546107b4906119e3565b80156108015780601f106107d657610100808354040283529160200191610801565b820191906000526020600020905b8154815290600101906020018083116107e457829003601f168201915b505050505081565b60006001600160a01b0382166108745760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161042f565b506001600160a01b031660009081526003602052604090205490565b606060018054610337906119e3565b600061271082106108e65760405162461bcd60e51b8152602060048201526011602482015270195e18d95959081b5a5b9d081b1a5b5a5d607a1b604482015260640161042f565b336000908152600c60205260408120805460019290610906908490611974565b9091555050600b546001600160a01b0316336001600160a01b03161461097a57336000908152600c60205260409020546014101561097a5760405162461bcd60e51b8152602060048201526011602482015270195e18d95959081b5a5b9d081b1a5b5a5d607a1b604482015260640161042f565b6109843383610e0a565b506001919050565b610700338383610f58565b6109a13383610b68565b6109bd5760405162461bcd60e51b815260040161042f90611923565b6109c984848484611027565b50505050565b6000818152600260205260409020546060906001600160a01b0316610a4e5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161042f565b6000610a5861105a565b90506000815111610a785760405180602001604052806000815250610aa3565b80610a8284611069565b604051602001610a93929190611852565b6040516020818303038152906040525b9392505050565b60006001600160e01b031982166380ac58cd60e01b1480610adb57506001600160e01b03198216635b5e139f60e01b145b8061032257506301ffc9a760e01b6001600160e01b0319831614610322565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610b2f82610704565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316610be15760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161042f565b6000610bec83610704565b9050806001600160a01b0316846001600160a01b03161480610c275750836001600160a01b0316610c1c846103ba565b6001600160a01b0316145b80610c5757506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316610c7282610704565b6001600160a01b031614610cda5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161042f565b6001600160a01b038216610d3c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161042f565b610d47838383611183565b610d52600082610afa565b6001600160a01b0383166000908152600360205260408120805460019290610d7b9084906119a0565b90915550506001600160a01b0382166000908152600360205260408120805460019290610da9908490611974565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216610e605760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161042f565b6000818152600260205260409020546001600160a01b031615610ec55760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161042f565b610ed160008383611183565b6001600160a01b0382166000908152600360205260408120805460019290610efa908490611974565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b816001600160a01b0316836001600160a01b03161415610fba5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161042f565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611032848484610c5f565b61103e8484848461123b565b6109c95760405162461bcd60e51b815260040161042f906118d1565b6060600a8054610337906119e3565b60608161108d5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156110b757806110a1'... 5636 more characters,
      r: '0x4f777b6556ae6af3163f8e85789c977d0a92d2bac1dc405d1aef41291c689bbb',
      s: '0x6fcd97f6f6af29a693f2306ec8e3a7046faa47a240eaa3502f2b6082bde28f32',
      v: 1,
      creates: '0x5a60c5d89A0A0e08ae0CAe73453e3AcC9C335847',
      chainId: 31337,
      wait: [Function (anonymous)]
    }
  },
  AZUKI: Contract {
    interface: Interface {
      fragments: [Array],
      _abiCoder: [AbiCoder],
      functions: [Object],
      errors: {},
      events: [Object],
      structs: {},
      deploy: [ConstructorFragment],
      _isInterface: true
    },
    provider: EthersProviderWrapper {
      _isProvider: true,
      _events: [],
      _emitted: [Object],
      disableCcipRead: false,
      formatter: [Formatter],
      anyNetwork: false,
      _networkPromise: [Promise],
      _maxInternalBlockNumber: 0,
      _lastBlockNumber: -2,
      _maxFilterBlockRange: 10,
      _pollingInterval: 4000,
      _fastQueryDate: 1678183301090,
      connection: [Object],
      _nextId: 42,
      _hardhatProvider: [BackwardsCompatibilityProviderAdapter],
      _eventLoopCache: [Object],
      _network: [Object],
      _internalBlockNumber: [Promise],
      _fastBlockNumber: 0,
      _fastBlockNumberPromise: [Promise]
    },
    signer: SignerWithAddress {
      _isSigner: true,
      address: '0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15',
      _signer: [JsonRpcSigner],
      provider: [EthersProviderWrapper]
    },
    callStatic: {
      'approve(address,uint256)': [Function (anonymous)],
      'balanceOf(address)': [Function (anonymous)],
      'baseURI()': [Function (anonymous)],
      'getApproved(uint256)': [Function (anonymous)],
      'isApprovedForAll(address,address)': [Function (anonymous)],
      'mint(uint256)': [Function (anonymous)],
      'mintCounts(address)': [Function (anonymous)],
      'name()': [Function (anonymous)],
      'ownerOf(uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256,bytes)': [Function (anonymous)],
      'setApprovalForAll(address,bool)': [Function (anonymous)],
      'setBaseURI(string)': [Function (anonymous)],
      'supportsInterface(bytes4)': [Function (anonymous)],
      'symbol()': [Function (anonymous)],
      'tokenByIndex(uint256)': [Function (anonymous)],
      'tokenOfOwnerByIndex(address,uint256)': [Function (anonymous)],
      'tokenURI(uint256)': [Function (anonymous)],
      'totalSupply()': [Function (anonymous)],
      'transferFrom(address,address,uint256)': [Function (anonymous)],
      approve: [Function (anonymous)],
      balanceOf: [Function (anonymous)],
      baseURI: [Function (anonymous)],
      getApproved: [Function (anonymous)],
      isApprovedForAll: [Function (anonymous)],
      mint: [Function (anonymous)],
      mintCounts: [Function (anonymous)],
      name: [Function (anonymous)],
      ownerOf: [Function (anonymous)],
      setApprovalForAll: [Function (anonymous)],
      setBaseURI: [Function (anonymous)],
      supportsInterface: [Function (anonymous)],
      symbol: [Function (anonymous)],
      tokenByIndex: [Function (anonymous)],
      tokenOfOwnerByIndex: [Function (anonymous)],
      tokenURI: [Function (anonymous)],
      totalSupply: [Function (anonymous)],
      transferFrom: [Function (anonymous)]
    },
    estimateGas: {
      'approve(address,uint256)': [Function (anonymous)],
      'balanceOf(address)': [Function (anonymous)],
      'baseURI()': [Function (anonymous)],
      'getApproved(uint256)': [Function (anonymous)],
      'isApprovedForAll(address,address)': [Function (anonymous)],
      'mint(uint256)': [Function (anonymous)],
      'mintCounts(address)': [Function (anonymous)],
      'name()': [Function (anonymous)],
      'ownerOf(uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256,bytes)': [Function (anonymous)],
      'setApprovalForAll(address,bool)': [Function (anonymous)],
      'setBaseURI(string)': [Function (anonymous)],
      'supportsInterface(bytes4)': [Function (anonymous)],
      'symbol()': [Function (anonymous)],
      'tokenByIndex(uint256)': [Function (anonymous)],
      'tokenOfOwnerByIndex(address,uint256)': [Function (anonymous)],
      'tokenURI(uint256)': [Function (anonymous)],
      'totalSupply()': [Function (anonymous)],
      'transferFrom(address,address,uint256)': [Function (anonymous)],
      approve: [Function (anonymous)],
      balanceOf: [Function (anonymous)],
      baseURI: [Function (anonymous)],
      getApproved: [Function (anonymous)],
      isApprovedForAll: [Function (anonymous)],
      mint: [Function (anonymous)],
      mintCounts: [Function (anonymous)],
      name: [Function (anonymous)],
      ownerOf: [Function (anonymous)],
      setApprovalForAll: [Function (anonymous)],
      setBaseURI: [Function (anonymous)],
      supportsInterface: [Function (anonymous)],
      symbol: [Function (anonymous)],
      tokenByIndex: [Function (anonymous)],
      tokenOfOwnerByIndex: [Function (anonymous)],
      tokenURI: [Function (anonymous)],
      totalSupply: [Function (anonymous)],
      transferFrom: [Function (anonymous)]
    },
    functions: {
      'approve(address,uint256)': [Function (anonymous)],
      'balanceOf(address)': [Function (anonymous)],
      'baseURI()': [Function (anonymous)],
      'getApproved(uint256)': [Function (anonymous)],
      'isApprovedForAll(address,address)': [Function (anonymous)],
      'mint(uint256)': [Function (anonymous)],
      'mintCounts(address)': [Function (anonymous)],
      'name()': [Function (anonymous)],
      'ownerOf(uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256,bytes)': [Function (anonymous)],
      'setApprovalForAll(address,bool)': [Function (anonymous)],
      'setBaseURI(string)': [Function (anonymous)],
      'supportsInterface(bytes4)': [Function (anonymous)],
      'symbol()': [Function (anonymous)],
      'tokenByIndex(uint256)': [Function (anonymous)],
      'tokenOfOwnerByIndex(address,uint256)': [Function (anonymous)],
      'tokenURI(uint256)': [Function (anonymous)],
      'totalSupply()': [Function (anonymous)],
      'transferFrom(address,address,uint256)': [Function (anonymous)],
      approve: [Function (anonymous)],
      balanceOf: [Function (anonymous)],
      baseURI: [Function (anonymous)],
      getApproved: [Function (anonymous)],
      isApprovedForAll: [Function (anonymous)],
      mint: [Function (anonymous)],
      mintCounts: [Function (anonymous)],
      name: [Function (anonymous)],
      ownerOf: [Function (anonymous)],
      setApprovalForAll: [Function (anonymous)],
      setBaseURI: [Function (anonymous)],
      supportsInterface: [Function (anonymous)],
      symbol: [Function (anonymous)],
      tokenByIndex: [Function (anonymous)],
      tokenOfOwnerByIndex: [Function (anonymous)],
      tokenURI: [Function (anonymous)],
      totalSupply: [Function (anonymous)],
      transferFrom: [Function (anonymous)]
    },
    populateTransaction: {
      'approve(address,uint256)': [Function (anonymous)],
      'balanceOf(address)': [Function (anonymous)],
      'baseURI()': [Function (anonymous)],
      'getApproved(uint256)': [Function (anonymous)],
      'isApprovedForAll(address,address)': [Function (anonymous)],
      'mint(uint256)': [Function (anonymous)],
      'mintCounts(address)': [Function (anonymous)],
      'name()': [Function (anonymous)],
      'ownerOf(uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256)': [Function (anonymous)],
      'safeTransferFrom(address,address,uint256,bytes)': [Function (anonymous)],
      'setApprovalForAll(address,bool)': [Function (anonymous)],
      'setBaseURI(string)': [Function (anonymous)],
      'supportsInterface(bytes4)': [Function (anonymous)],
      'symbol()': [Function (anonymous)],
      'tokenByIndex(uint256)': [Function (anonymous)],
      'tokenOfOwnerByIndex(address,uint256)': [Function (anonymous)],
      'tokenURI(uint256)': [Function (anonymous)],
      'totalSupply()': [Function (anonymous)],
      'transferFrom(address,address,uint256)': [Function (anonymous)],
      approve: [Function (anonymous)],
      balanceOf: [Function (anonymous)],
      baseURI: [Function (anonymous)],
      getApproved: [Function (anonymous)],
      isApprovedForAll: [Function (anonymous)],
      mint: [Function (anonymous)],
      mintCounts: [Function (anonymous)],
      name: [Function (anonymous)],
      ownerOf: [Function (anonymous)],
      setApprovalForAll: [Function (anonymous)],
      setBaseURI: [Function (anonymous)],
      supportsInterface: [Function (anonymous)],
      symbol: [Function (anonymous)],
      tokenByIndex: [Function (anonymous)],
      tokenOfOwnerByIndex: [Function (anonymous)],
      tokenURI: [Function (anonymous)],
      totalSupply: [Function (anonymous)],
      transferFrom: [Function (anonymous)]
    },
    filters: {
      'Approval(address,address,uint256)': [Function (anonymous)],
      'ApprovalForAll(address,address,bool)': [Function (anonymous)],
      'Transfer(address,address,uint256)': [Function (anonymous)],
      Approval: [Function (anonymous)],
      ApprovalForAll: [Function (anonymous)],
      Transfer: [Function (anonymous)]
    },
    _runningEvents: {},
    _wrappedEmits: {},
    address: '0x4e07D87De1CF586D51C3665e6a4d36eB9d99a457',
    resolvedAddress: Promise { '0x4e07D87De1CF586D51C3665e6a4d36eB9d99a457' },
    'approve(address,uint256)': [Function (anonymous)],
    'balanceOf(address)': [Function (anonymous)],
    'baseURI()': [Function (anonymous)],
    'getApproved(uint256)': [Function (anonymous)],
    'isApprovedForAll(address,address)': [Function (anonymous)],
    'mint(uint256)': [Function (anonymous)],
    'mintCounts(address)': [Function (anonymous)],
    'name()': [Function (anonymous)],
    'ownerOf(uint256)': [Function (anonymous)],
    'safeTransferFrom(address,address,uint256)': [Function (anonymous)],
    'safeTransferFrom(address,address,uint256,bytes)': [Function (anonymous)],
    'setApprovalForAll(address,bool)': [Function (anonymous)],
    'setBaseURI(string)': [Function (anonymous)],
    'supportsInterface(bytes4)': [Function (anonymous)],
    'symbol()': [Function (anonymous)],
    'tokenByIndex(uint256)': [Function (anonymous)],
    'tokenOfOwnerByIndex(address,uint256)': [Function (anonymous)],
    'tokenURI(uint256)': [Function (anonymous)],
    'totalSupply()': [Function (anonymous)],
    'transferFrom(address,address,uint256)': [Function (anonymous)],
    approve: [Function (anonymous)],
    balanceOf: [Function (anonymous)],
    baseURI: [Function (anonymous)],
    getApproved: [Function (anonymous)],
    isApprovedForAll: [Function (anonymous)],
    mint: [Function (anonymous)],
    mintCounts: [Function (anonymous)],
    name: [Function (anonymous)],
    ownerOf: [Function (anonymous)],
    setApprovalForAll: [Function (anonymous)],
    setBaseURI: [Function (anonymous)],
    supportsInterface: [Function (anonymous)],
    symbol: [Function (anonymous)],
    tokenByIndex: [Function (anonymous)],
    tokenOfOwnerByIndex: [Function (anonymous)],
    tokenURI: [Function (anonymous)],
    totalSupply: [Function (anonymous)],
    transferFrom: [Function (anonymous)],
    deployTransaction: {
      hash: '0x7143d9e9fa15849d37b88d7b358d238a6ef6743d2e1bd1539e3afeabf65f7556',
      type: 2,
      accessList: [],
      blockHash: '0xb70a40e3dc1bbe9ac1f7b7f2f57dca94291ae0306397988249e1ef9069a2fd44',
      blockNumber: 6,
      transactionIndex: 0,
      confirmations: 1,
      from: '0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15',
      gasPrice: BigNumber { value: "1540087620" },
      maxPriorityFeePerGas: BigNumber { value: "1000000000" },
      maxFeePerGas: BigNumber { value: "2080175240" },
      gasLimit: BigNumber { value: "1641234" },
      to: null,
      value: BigNumber { value: "0" },
      nonce: 5,
      data: '0x60806040523480156200001157600080fd5b5060405162001dc938038062001dc9833981016040819052620000349162000221565b8151829082906200004d906000906020850190620000c8565b50805162000063906001906020840190620000c8565b50506040805180820190915260178082527f68747470733a2f2f4d696e7461626c654552433732312f0000000000000000006020909201918252620000ad9250600a9190620000c8565b5050600b80546001600160a01b0319163317905550620002db565b828054620000d69062000288565b90600052602060002090601f016020900481019282620000fa576000855562000145565b82601f106200011557805160ff191683800117855562000145565b8280016001018555821562000145579182015b828111156200014557825182559160200191906001019062000128565b506200015392915062000157565b5090565b5b8082111562000153576000815560010162000158565b600082601f8301126200017f578081fd5b81516001600160401b03808211156200019c576200019c620002c5565b604051601f8301601f19908116603f01168101908282118183101715620001c757620001c7620002c5565b81604052838152602092508683858801011115620001e3578485fd5b8491505b83821015620002065785820183015181830184015290820190620001e7565b838211156200021757848385830101525b9695505050505050565b6000806040838503121562000234578182fd5b82516001600160401b03808211156200024b578384fd5b62000259868387016200016e565b935060208501519150808211156200026f578283fd5b506200027e858286016200016e565b9150509250929050565b600181811c908216806200029d57607f821691505b60208210811415620002bf57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b611ade80620002eb6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806355f804b3116100ad578063a0712d6811610071578063a0712d6814610275578063a22cb46514610288578063b88d4fde1461029b578063c87b56dd146102ae578063e985e9c5146102c157600080fd5b806355f804b31461022c5780636352211e1461023f5780636c0360eb1461025257806370a082311461025a57806395d89b411461026d57600080fd5b806323b872dd116100f457806323b872dd146101c05780632f745c59146101d357806342842e0e146101e65780634f6ccce7146101f9578063532778791461020c57600080fd5b806301ffc9a71461013157806306fdde0314610159578063081812fc1461016e578063095ea7b31461019957806318160ddd146101ae575b600080fd5b61014461013f366004611790565b6102fd565b60405190151581526020015b60405180910390f35b610161610328565b60405161015091906118be565b61018161017c36600461180e565b6103ba565b6040516001600160a01b039091168152602001610150565b6101ac6101a7366004611767565b610454565b005b6008545b604051908152602001610150565b6101ac6101ce366004611679565b61056a565b6101b26101e1366004611767565b61059b565b6101ac6101f4366004611679565b610631565b6101b261020736600461180e565b61064c565b6101b261021a36600461162d565b600c6020526000908152604090205481565b6101ac61023a3660046117c8565b6106ed565b61018161024d36600461180e565b610704565b61016161077b565b6101b261026836600461162d565b610809565b610161610890565b61014461028336600461180e565b61089f565b6101ac61029636600461172d565b61098c565b6101ac6102a93660046116b4565b610997565b6101616102bc36600461180e565b6109cf565b6101446102cf366004611647565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b0319821663780e9d6360e01b1480610322575061032282610aaa565b92915050565b606060008054610337906119e3565b80601f0160208091040260200160405190810160405280929190818152602001828054610363906119e3565b80156103b05780601f10610385576101008083540402835291602001916103b0565b820191906000526020600020905b81548152906001019060200180831161039357829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166104385760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061045f82610704565b9050806001600160a01b0316836001600160a01b031614156104cd5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161042f565b336001600160a01b03821614806104e957506104e981336102cf565b61055b5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161042f565b6105658383610afa565b505050565b6105743382610b68565b6105905760405162461bcd60e51b815260040161042f90611923565b610565838383610c5f565b60006105a683610809565b82106106085760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161042f565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61056583838360405180602001604052806000815250610997565b600061065760085490565b82106106ba5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161042f565b600882815481106106db57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b805161070090600a906020840190611502565b5050565b6000818152600260205260408120546001600160a01b0316806103225760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161042f565b600a8054610788906119e3565b80601f01602080910402602001604051908101604052809291908181526020018280546107b4906119e3565b80156108015780601f106107d657610100808354040283529160200191610801565b820191906000526020600020905b8154815290600101906020018083116107e457829003601f168201915b505050505081565b60006001600160a01b0382166108745760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161042f565b506001600160a01b031660009081526003602052604090205490565b606060018054610337906119e3565b600061271082106108e65760405162461bcd60e51b8152602060048201526011602482015270195e18d95959081b5a5b9d081b1a5b5a5d607a1b604482015260640161042f565b336000908152600c60205260408120805460019290610906908490611974565b9091555050600b546001600160a01b0316336001600160a01b03161461097a57336000908152600c60205260409020546014101561097a5760405162461bcd60e51b8152602060048201526011602482015270195e18d95959081b5a5b9d081b1a5b5a5d607a1b604482015260640161042f565b6109843383610e0a565b506001919050565b610700338383610f58565b6109a13383610b68565b6109bd5760405162461bcd60e51b815260040161042f90611923565b6109c984848484611027565b50505050565b6000818152600260205260409020546060906001600160a01b0316610a4e5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161042f565b6000610a5861105a565b90506000815111610a785760405180602001604052806000815250610aa3565b80610a8284611069565b604051602001610a93929190611852565b6040516020818303038152906040525b9392505050565b60006001600160e01b031982166380ac58cd60e01b1480610adb57506001600160e01b03198216635b5e139f60e01b145b8061032257506301ffc9a760e01b6001600160e01b0319831614610322565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610b2f82610704565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316610be15760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161042f565b6000610bec83610704565b9050806001600160a01b0316846001600160a01b03161480610c275750836001600160a01b0316610c1c846103ba565b6001600160a01b0316145b80610c5757506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316610c7282610704565b6001600160a01b031614610cda5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161042f565b6001600160a01b038216610d3c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161042f565b610d47838383611183565b610d52600082610afa565b6001600160a01b0383166000908152600360205260408120805460019290610d7b9084906119a0565b90915550506001600160a01b0382166000908152600360205260408120805460019290610da9908490611974565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216610e605760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161042f565b6000818152600260205260409020546001600160a01b031615610ec55760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161042f565b610ed160008383611183565b6001600160a01b0382166000908152600360205260408120805460019290610efa908490611974565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b816001600160a01b0316836001600160a01b03161415610fba5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161042f565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611032848484610c5f565b61103e8484848461123b565b6109c95760405162461bcd60e51b815260040161042f906118d1565b6060600a8054610337906119e3565b60608161108d5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156110b757806110a1'... 5636 more characters,
      r: '0x2be315f4ba21b3ac25e3d1cf089231dadbb545e674fbc02b4a4e6608e386a723',
      s: '0x57fead2e5724f75de28bb4f39009e5ec8d74b25364104244f77d1b7dd499c919',
      v: 0,
      creates: '0x4e07D87De1CF586D51C3665e6a4d36eB9d99a457',
      chainId: 31337,
      wait: [Function (anonymous)]
    }
  }
}
-> Prepare mock external IncentivesController...
contracts-helpers:registerContractInJsonDb, contractId: MockIncentivesController address: 0xC7F247a33C79BB0fABc3605479372D3Ba188fcbc deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
-> Prepare proxy admin...
contracts-helpers:registerContractInJsonDb, contractId: UnlockdProxyAdminTest address: 0x69D1108D37825212736aC101B445b6B57a390d13 deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
unlockdProxyAdmin: 0x69D1108D37825212736aC101B445b6B57a390d13
-> Prepare mock unft registry...
contracts-helpers:registerContractInJsonDb, contractId: UNFT address: 0x8b89F971cA1A5dE1B7df7f554a3024eE84FeeB05 deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
contracts-helpers:insertContractAddressInDb, id: UNFTRegistryImpl address 0x1864c9342339c36588F7f31d1079690a7003c7a2
contracts-helpers:registerContractInJsonDb, contractId: UNFTRegistry address: 0x1864c9342339c36588F7f31d1079690a7003c7a2 deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
contracts-helpers:registerContractInJsonDb, contractId: UNFTRegistry address: 0xd062F368df81E0A7f4fB6e8F5ce5AC7deD388796 deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
-> Prepare mock unft tokens...
createUNFT: WPUNKS 0xeeE74b62C35c8A832bE8034aE55c50b9898b1A30 0x8b89F971cA1A5dE1B7df7f554a3024eE84FeeB05
createUNFT: BAYC 0x56A4fa30F819373feff06F5777cBf1a81EdD0257 0x8b89F971cA1A5dE1B7df7f554a3024eE84FeeB05
createUNFT: DOODLE 0xA1DB6D0ECF6472b98bDE32915a69bad0c628d6df 0x8b89F971cA1A5dE1B7df7f554a3024eE84FeeB05
createUNFT: AZUKI 0xa36d5099b9bc3298835dbD0Aa4674f7010bAF24f 0x8b89F971cA1A5dE1B7df7f554a3024eE84FeeB05
-> Prepare address provider...
contracts-helpers:registerContractInJsonDb, contractId: LendPoolAddressesProviderRegistry address: 0xd240323E990c480f993E74634c08f3D6EAD0a31F deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
contracts-helpers:registerContractInJsonDb, contractId: LendPoolAddressesProvider address: 0x1eaA4a267eDcde0eB5e08D08810Aa1696b123a2D deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
-> Prepare unlockd libraries...
contracts-helpers:registerContractInJsonDb, contractId: GenericLogic address: 0x44e12d4D37f6DDAA00c086442998B1A61365BCa9 deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
contracts-helpers:registerContractInJsonDb, contractId: ReserveLogic address: 0xF340913980c21cb9D96bE990451c5471FABBD2B9 deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
contracts-helpers:registerContractInJsonDb, contractId: NftLogic address: 0x0A66e11653e32D082F3330Dc99687ce42Eb53121 deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
contracts-helpers:registerContractInJsonDb, contractId: ValidationLogic address: 0xD5A42dEB39C8EfbCE0f81cEb4c51500501809e89 deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
contracts-helpers:registerContractInJsonDb, contractId: SupplyLogic address: 0x4E76d6429C6f9dD22F87f10BcA800664B8Cc118b deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
contracts-helpers:registerContractInJsonDb, contractId: BorrowLogic address: 0x153a75c692b6f047974bc96e30d20546B0Bc2992 deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
contracts-helpers:registerContractInJsonDb, contractId: LiquidateLogic address: 0x17624D935b72A4d765d7A69a68E7C0725A38d5bc deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
contracts-helpers:registerContractInJsonDb, contractId: LiquidateMarketsLogic address: 0x7ECdCa35F3B55acE694A7DA48a759444Fe81b943 deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
contracts-helpers:registerContractInJsonDb, contractId: LendingLogic address: 0xa25a322c846E3be3207365390A02864fdEDfA0CD deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
contracts-helpers:registerContractInJsonDb, contractId: ConfiguratorLogic address: 0x7dDc7b2963AC96336Ec238e816FCbc30aDB113AD deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
-> Prepare lend pool...
contracts-helpers:insertContractAddressInDb, id: LendPoolImpl address 0x58B6e24b2a462Ef81e154515Ab7adc804512325c
contracts-helpers:registerContractInJsonDb, contractId: LendPool address: 0x58B6e24b2a462Ef81e154515Ab7adc804512325c deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
contracts-helpers:insertContractAddressInDb, id: LendPool address 0x639780a68aAB819EFDc3382E01beeEa68113DB5a
-> Prepare lend pool loan...
contracts-helpers:insertContractAddressInDb, id: LendPoolLoanImpl address 0x5c769753F192449c3c6AeC7BF2145928eb261699
contracts-helpers:registerContractInJsonDb, contractId: LendPoolLoan address: 0x5c769753F192449c3c6AeC7BF2145928eb261699 deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
contracts-helpers:insertContractAddressInDb, id: LendPoolLoan address 0x52E4b6681e07E5D5BA5f9C4566046462c18Eb8ee
-> Prepare pool configurator...
contracts-helpers:insertContractAddressInDb, id: LendPoolConfiguratorImpl address 0xDB8c2AE619685b26C26a9ff48698049C363784f3
contracts-helpers:registerContractInJsonDb, contractId: LendPoolConfigurator address: 0xDB8c2AE619685b26C26a9ff48698049C363784f3 deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
contracts-helpers:insertContractAddressInDb, id: LendPoolConfigurator address 0x40142Ece657f75Db6150939d82594c5759cA111A
-> Prepare mock reserve token aggregators...
contracts-helpers:registerContractInJsonDb, contractId: MockChainlinkOracle address: 0x32727fA2ad74483C8DC1F899C5c06AcCd5eDAED8 deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
ChainlinkMockAggregator, WETH 0x32727fA2ad74483C8DC1F899C5c06AcCd5eDAED8 1000000000000000000 18
contracts-helpers:registerContractInJsonDb, contractId: MockChainlinkOracle address: 0x76F965B99e9E216a648A8dB9F8aB459e880181Ff deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
ChainlinkMockAggregator, DAI 0x76F965B99e9E216a648A8dB9F8aB459e880181Ff 233211000000000 18
contracts-helpers:registerContractInJsonDb, contractId: MockChainlinkOracle address: 0x53933349dA8E97b77c1f43Ba01192adb8C510fA7 deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
ChainlinkMockAggregator, USDC 0x53933349dA8E97b77c1f43Ba01192adb8C510fA7 234916200000000 18
contracts-helpers:registerContractInJsonDb, contractId: MockChainlinkOracle address: 0x51998F16F707a0cdd5ECE2a56c034552dF3fb855 deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
ChainlinkMockAggregator, USD 0x51998F16F707a0cdd5ECE2a56c034552dF3fb855 425107839690 8
contracts-helpers:registerContractInJsonDb, contractId: MockChainlinkOracle address: 0x8e090D5B023252bE8d05d4c33b959A6F4A8BdD9e deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15
-> Prepare reserve oracle...
contracts-helpers:insertContractAddressInDb, id: ReserveOracleImpl address 0x3Bd92b2536c4F1537c7c95eA4a203c182AC57973
contracts-helpers:registerContractInJsonDb, contractId: ReserveOracle address: 0x3Bd92b2536c4F1537c7c95eA4a203c182AC57973 deployer 0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15

  1) "before all" hook in "{root}"
·---------------------------------------------------------------------|---------------------------|-------------|-----------------------------·
|                         [90mSolc version: 0.8.4[39m                         ·  [90mOptimizer enabled: true[39m  ·  [90mRuns: 200[39m  ·  [90mBlock limit: 12450000 gas[39m  │
······································································|···························|·············|······························
|  [32m[1mMethods[22m[39m                                                                                                                                    │
······································|·······························|·············|·············|·············|···············|··············
|  [1mContract[22m                           ·  [1mMethod[22m                       ·  [32mMin[39m        ·  [32mMax[39m        ·  [32mAvg[39m        ·  [1m# calls[22m      ·  [1meur (avg)[22m  │
······································|·······························|·············|·············|·············|···············|··············
|  [90mCryptoPunksMarket[39m                  ·  allInitialOwnersAssigned     ·          -  ·          -  ·      45518  ·            [90m2[39m  ·          [32m[90m-[32m[39m  │
······································|·······························|·············|·············|·············|···············|··············
|  [90mLendPoolAddressesProvider[39m          ·  setEmergencyAdmin            ·          -  ·          -  ·      47355  ·            [90m2[39m  ·          [32m[90m-[32m[39m  │
······································|·······························|·············|·············|·············|···············|··············
|  [90mLendPoolAddressesProvider[39m          ·  setIncentivesController      ·          -  ·          -  ·      47375  ·            [90m2[39m  ·          [32m[90m-[32m[39m  │
······································|·······························|·············|·············|·············|···············|··············
|  [90mLendPoolAddressesProvider[39m          ·  setLendPoolConfiguratorImpl  ·          -  ·          -  ·     610449  ·            [90m2[39m  ·          [32m[90m-[32m[39m  │
······································|·······························|·············|·············|·············|···············|··············
|  [90mLendPoolAddressesProvider[39m          ·  setLendPoolImpl              ·          -  ·          -  ·     698763  ·            [90m2[39m  ·          [32m[90m-[32m[39m  │
······································|·······························|·············|·············|·············|···············|··············
|  [90mLendPoolAddressesProvider[39m          ·  setLendPoolLiquidator        ·          -  ·          -  ·      47443  ·            [90m2[39m  ·          [32m[90m-[32m[39m  │
······································|·······························|·············|·············|·············|···············|··············
|  [90mLendPoolAddressesProvider[39m          ·  setLendPoolLoanImpl          ·          -  ·          -  ·     659458  ·            [90m2[39m  ·          [32m[90m-[32m[39m  │
······································|·······························|·············|·············|·············|···············|··············
|  [90mLendPoolAddressesProvider[39m          ·  setPoolAdmin                 ·          -  ·          -  ·      47444  ·            [90m2[39m  ·          [32m[90m-[32m[39m  │
······································|·······························|·············|·············|·············|···············|··············
|  [90mLendPoolAddressesProvider[39m          ·  setUNFTRegistry              ·          -  ·          -  ·      47376  ·            [90m2[39m  ·          [32m[90m-[32m[39m  │
······································|·······························|·············|·············|·············|···············|··············
|  [90mLendPoolAddressesProviderRegistry[39m  ·  registerAddressesProvider    ·          -  ·          -  ·      92000  ·            [90m2[39m  ·          [32m[90m-[32m[39m  │
······································|·······························|·············|·············|·············|···············|··············
|  [90mMockChainlinkOracle[39m                ·  mockAddAnswer                ·     [36m245569[39m  ·     [31m245581[39m  ·     245572  ·            [90m4[39m  ·          [32m[90m-[32m[39m  │
······································|·······························|·············|·············|·············|···············|··············
|  [90mProxyAdmin[39m                         ·  transferOwnership            ·          -  ·          -  ·      33148  ·            [90m2[39m  ·          [32m[90m-[32m[39m  │
······································|·······························|·············|·············|·············|···············|··············
|  [90mUNFTRegistry[39m                       ·  createUNFT                   ·     [36m725473[39m  ·     [31m742551[39m  ·     729743  ·            [90m8[39m  ·          [32m[90m-[32m[39m  │
······································|·······························|·············|·············|·············|···············|··············
|  [32m[1mDeployments[22m[39m                                                        ·                                         ·  [1m% of limit[22m   ·             │
······································································|·············|·············|·············|···············|··············
|  BorrowLogic                                                        ·          -  ·          -  ·    2060203  ·       [90m16.5 %[39m  ·          [32m[90m-[32m[39m  │
······································································|·············|·············|·············|···············|··············
|  ConfiguratorLogic                                                  ·          -  ·          -  ·    1970094  ·       [90m15.8 %[39m  ·          [32m[90m-[32m[39m  │
······································································|·············|·············|·············|···············|··············
|  CryptoPunksMarket                                                  ·          -  ·          -  ·    2378109  ·       [90m19.1 %[39m  ·          [32m[90m-[32m[39m  │
······································································|·············|·············|·············|···············|··············
|  GenericLogic                                                       ·          -  ·          -  ·      84290  ·        [90m0.7 %[39m  ·          [32m[90m-[32m[39m  │
······································································|·············|·············|·············|···············|··············
|  LendingLogic                                                       ·          -  ·          -  ·      72217  ·        [90m0.6 %[39m  ·          [32m[90m-[32m[39m  │
······································································|·············|·············|·············|···············|··············
|  LendPool                                                           ·          -  ·          -  ·    5365682  ·       [90m43.1 %[39m  ·          [32m[90m-[32m[39m  │
······································································|·············|·············|·············|···············|··············
|  LendPoolAddressesProvider                                          ·          -  ·          -  ·    2978496  ·       [90m23.9 %[39m  ·          [32m[90m-[32m[39m  │
······································································|·············|·············|·············|···············|··············
|  LendPoolAddressesProviderRegistry                                  ·          -  ·          -  ·     502283  ·          [90m4 %[39m  ·          [32m[90m-[32m[39m  │
······································································|·············|·············|·············|···············|··············
|  LendPoolConfigurator                                               ·          -  ·          -  ·    5258123  ·       [90m42.2 %[39m  ·          [32m[90m-[32m[39m  │
······································································|·············|·············|·············|···············|··············
|  LendPoolLoan                                                       ·          -  ·          -  ·    3473337  ·       [90m27.9 %[39m  ·          [32m[90m-[32m[39m  │
······································································|·············|·············|·············|···············|··············
|  LiquidateLogic                                                     ·          -  ·          -  ·    5122132  ·       [90m41.1 %[39m  ·          [32m[90m-[32m[39m  │
······································································|·············|·············|·············|···············|··············
|  LiquidateMarketsLogic                                              ·          -  ·          -  ·    3025524  ·       [90m24.3 %[39m  ·          [32m[90m-[32m[39m  │
······································································|·············|·············|·············|···············|··············
|  MintableERC721                                                     ·    [36m1641210[39m  ·    [31m1641258[39m  ·    1641234  ·       [90m13.2 %[39m  ·          [32m[90m-[32m[39m  │
······································································|·············|·············|·············|···············|··············
|  MockChainlinkOracle                                                ·          -  ·          -  ·     620122  ·          [90m5 %[39m  ·          [32m[90m-[32m[39m  │
······································································|·············|·············|·············|···············|··············
|  MockIncentivesController                                           ·          -  ·          -  ·     142669  ·        [90m1.1 %[39m  ·          [32m[90m-[32m[39m  │
······································································|·············|·············|·············|···············|··············
|  NftLogic                                                           ·          -  ·          -  ·     141010  ·        [90m1.1 %[39m  ·          [32m[90m-[32m[39m  │
······································································|·············|·············|·············|···············|··············
|  ReserveLogic                                                       ·          -  ·          -  ·     171208  ·        [90m1.4 %[39m  ·          [32m[90m-[32m[39m  │
······································································|·············|·············|·············|···············|··············
|  ReserveOracle                                                      ·          -  ·          -  ·    1239216  ·         [90m10 %[39m  ·          [32m[90m-[32m[39m  │
······································································|·············|·············|·············|···············|··············
|  SupplyLogic                                                        ·          -  ·          -  ·    1235281  ·        [90m9.9 %[39m  ·          [32m[90m-[32m[39m  │
······································································|·············|·············|·············|···············|··············
|  UNFT                                                               ·          -  ·          -  ·    1503057  ·       [90m12.1 %[39m  ·          [32m[90m-[32m[39m  │
······································································|·············|·············|·············|···············|··············
|  UNFTRegistry                                                       ·          -  ·          -  ·    2441516  ·       [90m19.6 %[39m  ·          [32m[90m-[32m[39m  │
······································································|·············|·············|·············|···············|··············
|  UnlockdProxyAdmin                                                  ·          -  ·          -  ·     470704  ·        [90m3.8 %[39m  ·          [32m[90m-[32m[39m  │
······································································|·············|·············|·············|···············|··············
|  UnlockdUpgradeableProxy                                            ·          -  ·          -  ·     740476  ·        [90m5.9 %[39m  ·          [32m[90m-[32m[39m  │
······································································|·············|·············|·············|···············|··············
|  ValidationLogic                                                    ·          -  ·          -  ·    1573518  ·       [90m12.6 %[39m  ·          [32m[90m-[32m[39m  │
······································································|·············|·············|·············|···············|··············
|  WETH9Mocked                                                        ·          -  ·          -  ·     586429  ·        [90m4.7 %[39m  ·          [32m[90m-[32m[39m  │
······································································|·············|·············|·············|···············|··············
|  WrappedPunk                                                        ·          -  ·          -  ·    1992593  ·         [90m16 %[39m  ·          [32m[90m-[32m[39m  │
·---------------------------------------------------------------------|-------------|-------------|-------------|---------------|-------------·

  0 passing (4s)
  1 failing

  1) "before all" hook in "{root}":
     Error: cannot estimate gas; transaction may fail or may require manual gas limit [ See: https://links.ethers.org/v5-errors-UNPREDICTABLE_GAS_LIMIT ] (reason="VM Exception while processing transaction: reverted with reason string 'Initializable: contract is already initialized'", method="estimateGas", transaction={"from":"0x5b69E6884C70f42819Fb35Bf3C25578ee11AAA15","to":"0x3Bd92b2536c4F1537c7c95eA4a203c182AC57973","data":"0xc4d66de8000000000000000000000000b4b4ead1a260f1572b88b9d8aba5a152d166c104","accessList":null}, error={"stackTrace":[{"type":0,"sourceReference":{"function":"initialize","contract":"ReserveOracle","sourceName":"contracts/protocol/ReserveOracle.sol","sourceContent":"// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.4;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {IReserveOracleGetter} from \"../interfaces/IReserveOracleGetter.sol\";\nimport {BlockContext} from \"../utils/BlockContext.sol\";\n\ncontract ReserveOracle is IReserveOracleGetter, OwnableUpgradeable, BlockContext {\n  uint256 private constant TOKEN_DIGIT = 10**18;\n\n  event AggregatorAdded(address currencyKey, address aggregator);\n  event AggregatorRemoved(address currencyKey, address aggregator);\n\n  // key by currency symbol, eg USDT\n  mapping(address => AggregatorV3Interface) public priceFeedMap;\n  address[] public priceFeedKeys;\n\n  address public weth;\n\n  /// @custom:oz -upgrades -unsafe -allow constructor\n  constructor () initializer {}\n  \n  function initialize(address _weth) public initializer {\n    __Ownable_init();\n    weth = _weth;\n  }\n\n  /**\n   * @notice sets the aggregators and pricefeedkeys\n   * @param _priceFeedKeys the array of pricefeed keys\n   * @param _aggregators the array of aggregators\n   **/\n  function setAggregators(address[] calldata _priceFeedKeys, address[] calldata _aggregators) external onlyOwner {\n    uint256 priceFeedKeysLength = _priceFeedKeys.length;\n    require(priceFeedKeysLength == _aggregators.length, \"ReserveOracle: INCONSISTENT_PARAMS_LENGTH\");\n    for (uint256 i = 0; i < priceFeedKeysLength; ) {\n      _addAggregator(_priceFeedKeys[i], _aggregators[i]);\n\n      unchecked {\n        ++i;\n      }\n    }\n  }\n\n  /**\n   * @notice adds a single aggregator\n   * @param _priceFeedKey the pricefeed key\n   * @param _aggregator the aggregator to add\n   **/\n  function addAggregator(address _priceFeedKey, address _aggregator) external onlyOwner {\n    _addAggregator(_priceFeedKey, _aggregator);\n  }\n\n  /**\n   * @notice adds a single aggregator\n   * @param _priceFeedKey the pricefeed key\n   * @param _aggregator the aggregator to add\n   **/\n  function _addAggregator(address _priceFeedKey, address _aggregator) internal {\n    requireNonEmptyAddress(_priceFeedKey);\n    requireNonEmptyAddress(_aggregator);\n    if (address(priceFeedMap[_priceFeedKey]) == address(0)) {\n      priceFeedKeys.push(_priceFeedKey);\n    }\n    priceFeedMap[_priceFeedKey] = AggregatorV3Interface(_aggregator);\n    emit AggregatorAdded(_priceFeedKey, address(_aggregator));\n  }\n\n  /**\n   * @notice removes a single aggregator\n   * @param _priceFeedKey the pricefeed key of the aggregator to remove\n   **/\n  function removeAggregator(address _priceFeedKey) external onlyOwner {\n    address aggregator = address(priceFeedMap[_priceFeedKey]);\n    requireNonEmptyAddress(aggregator);\n    delete priceFeedMap[_priceFeedKey];\n\n    uint256 length = priceFeedKeys.length;\n    for (uint256 i = 0; i < length; ) {\n      if (priceFeedKeys[i] == _priceFeedKey) {\n        // if the removal item is the last one, just `pop`\n        if (i != length - 1) {\n          priceFeedKeys[i] = priceFeedKeys[length - 1];\n        }\n        priceFeedKeys.pop();\n        emit AggregatorRemoved(_priceFeedKey, aggregator);\n        break;\n      }\n\n      unchecked {\n        ++i;\n      }\n    }\n  }\n\n  /**\n   * @notice returns an aggregator gicen a pricefeed key\n   * @param _priceFeedKey the pricefeed key of the aggregator to fetch\n   **/\n  function getAggregator(address _priceFeedKey) public view returns (AggregatorV3Interface) {\n    return priceFeedMap[_priceFeedKey];\n  }\n\n  /**\n   * @inheritdoc IReserveOracleGetter\n   */\n  function getAssetPrice(address _priceFeedKey) external view override returns (uint256) {\n    if (_priceFeedKey == weth) {\n      return 1 ether;\n    }\n    require(isExistedKey(_priceFeedKey), \"ReserveOracle: key not existed\");\n    AggregatorV3Interface aggregator = getAggregator(_priceFeedKey);\n\n    (, int256 _price, , , ) = aggregator.latestRoundData();\n    require(_price >= 0, \"ReserveOracle: negative answer\");\n    uint8 decimals = aggregator.decimals();\n\n    return formatDecimals(uint256(_price), decimals);\n  }\n\n  /**\n   * @notice returns the aggregator's latest timestamp\n   * @param _priceFeedKey the pricefeed key of the aggregator to fetch\n   **/\n  function getLatestTimestamp(address _priceFeedKey) public view returns (uint256) {\n    AggregatorV3Interface aggregator = getAggregator(_priceFeedKey);\n    requireNonEmptyAddress(address(aggregator));\n\n    (, , , uint256 timestamp, ) = aggregator.latestRoundData();\n\n    return timestamp;\n  }\n\n  /**\n   * @inheritdoc IReserveOracleGetter\n   */\n  function getTwapPrice(address _priceFeedKey, uint256 _interval) external view override returns (uint256) {\n    require(isExistedKey(_priceFeedKey), \"ReserveOracle: key not existed\");\n    require(_interval != 0, \"ReserveOracle: interval can't be 0\");\n\n    AggregatorV3Interface aggregator = getAggregator(_priceFeedKey);\n    (uint80 roundId, int256 _price, , uint256 timestamp, ) = aggregator.latestRoundData();\n    require(_price >= 0, \"ReserveOracle: negative answer\");\n    uint8 decimals = aggregator.decimals();\n\n    uint256 latestPrice = formatDecimals(uint256(_price), decimals);\n\n    require(roundId >= 0, \"ReserveOracle: Not enough history\");\n    uint256 latestTimestamp = timestamp;\n    uint256 baseTimestamp = _blockTimestamp() - _interval;\n    // if latest updated timestamp is earlier than target timestamp, return the latest price.\n    if (latestTimestamp < baseTimestamp || roundId == 0) {\n      return latestPrice;\n    }\n\n    // rounds are like snapshots, latestRound means the latest price snapshot. follow chainlink naming\n    uint256 cumulativeTime = _blockTimestamp() - latestTimestamp;\n    uint256 previousTimestamp = latestTimestamp;\n    uint256 weightedPrice = latestPrice * cumulativeTime;\n    while (true) {\n      if (roundId == 0) {\n        // if cumulative time is less than requested interval, return current twap price\n        return weightedPrice / cumulativeTime;\n      }\n\n      roundId = roundId - 1;\n      // get current round timestamp and price\n      (, int256 _priceTemp, , uint256 currentTimestamp, ) = aggregator.getRoundData(roundId);\n      require(_priceTemp >= 0, \"ReserveOracle: negative answer\");\n\n      uint256 price = formatDecimals(uint256(_priceTemp), decimals);\n\n      // check if current round timestamp is earlier than target timestamp\n      if (currentTimestamp <= baseTimestamp) {\n        // weighted time period will be (target timestamp - previous timestamp). For example,\n        // now is 1000, _interval is 100, then target timestamp is 900. If timestamp of current round is 970,\n        // and timestamp of NEXT round is 880, then the weighted time period will be (970 - 900) = 70,\n        // instead of (970 - 880)\n        weightedPrice = weightedPrice + (price * (previousTimestamp - baseTimestamp));\n        break;\n      }\n\n      uint256 timeFraction = previousTimestamp - currentTimestamp;\n      weightedPrice = weightedPrice + (price * timeFraction);\n      cumulativeTime = cumulativeTime + timeFraction;\n      previousTimestamp = currentTimestamp;\n    }\n    return weightedPrice / _interval;\n  }\n\n  /**\n   * @notice checks if a pricefeed key exists\n   * @param _priceFeedKey the pricefeed key to check\n   **/\n  function isExistedKey(address _priceFeedKey) private view returns (bool) {\n    uint256 length = priceFeedKeys.length;\n    for (uint256 i = 0; i < length; ) {\n      if (priceFeedKeys[i] == _priceFeedKey) {\n        return true;\n      }\n\n      unchecked {\n        ++i;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @notice checks if an address is 0\n   * @param _addr the address to check\n   **/\n  function requireNonEmptyAddress(address _addr) internal pure {\n    require(_addr != address(0), \"ReserveOracle: empty address\");\n  }\n\n  /**\n   * @notice formats a price to the given decimals\n   * @param _price the price to format\n   * @param _decimals the decimals to format the price to\n   **/\n  function formatDecimals(uint256 _price, uint8 _decimals) internal pure returns (uint256) {\n    return (_price * TOKEN_DIGIT) / (10**uint256(_decimals));\n  }\n\n  /**\n   * @notice returns the price feed length\n   **/\n  function getPriceFeedLength() public view returns (uint256 length) {\n    return priceFeedKeys.length;\n  }\n}\n","line":25,"range":[991,1090]},"functionType":1},{"type":4,"sourceReference":{"function":"onlyOwner","contract":"ReserveOracle","sourceName":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","sourceContent":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n","line":49,"range":[1516,1584]},"message":{"value":{"type":"Buffer","data":[8,195,121,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,73,110,105,116,105,97,108,105,122,97,98,108,101,58,32,99,111,110,116,114,97,99,116,32,105,115,32,97,108,114,101,97,100,121,32,105,110,105,116,105,97,108,105,122,101,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},"_selector":"08c379a0"},"isInvalidOpcodeError":false}],"data":"0x08c379a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002e496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564000000000000000000000000000000000000"}, code=UNPREDICTABLE_GAS_LIMIT, version=providers/5.7.2)
      at Logger.makeError (node_modules/@ethersproject/logger/src.ts/index.ts:269:28)
      at Logger.throwError (node_modules/@ethersproject/logger/src.ts/index.ts:281:20)
      at checkError (node_modules/@ethersproject/providers/src.ts/json-rpc-provider.ts:78:20)
      at EthersProviderWrapper.<anonymous> (node_modules/@ethersproject/providers/src.ts/json-rpc-provider.ts:642:20)
      at step (node_modules/@ethersproject/providers/lib/json-rpc-provider.js:48:23)
      at Object.throw (node_modules/@ethersproject/providers/lib/json-rpc-provider.js:29:53)
      at rejected (node_modules/@ethersproject/providers/lib/json-rpc-provider.js:21:65)
      at processTicksAndRejections (node:internal/process/task_queues:95:5)
      at runNextTicks (node:internal/process/task_queues:64:3)
      at listOnTimeout (node:internal/timers:538:9)



